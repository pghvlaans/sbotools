#!/usr/bin/perl
#
# vim: ts=4:noet
#
# sboupgrade
# script to upgrade (a) SlackBuild(s) by name
#
# authors: Jacob Pipkin <j@dawnrazor.net>
#          Luke Williams <xocel@iquidus.org>
#          Andreas Guldstrand <andreas.guldstrand@gmail.com>
# maintainer: K. Eugene Carlson <kvngncrlsn@gmail.com>
# license: MIT License

use 5.16.0;
use strict;
use warnings FATAL => 'all';
use SBO::Lib qw/ _ERR_OPENFH auto_reverse get_available_updates prompt usage_error slackbuilds_or_fetch uniq get_full_reverse_queue get_sbo_location get_inst_names get_installed_cpans get_installed_packages get_build_queue get_orig_location get_readme_contents get_requires get_sbo_locations get_user_group in merge_queues open_fh user_group_exist user_prompt process_sbos print_failures rationalize_queue verify_gpg %config show_version lint_sbo_config wrapsay /;
use Getopt::Long qw(:config bundling);
use File::Basename;
use File::Copy;

my $self = basename($0);

sub show_usage {
    print <<"EOF";
Usage: $self (options) sbo ...
Usage: $self --all

Options (defaults shown first where applicable):
  -h|--help:
    this screen.
  -v|--version:
    version information.
  --all
    this flag will upgrade everything reported by sbocheck(1).
  --batch:
    like nointeractive, but calculates dependencies (use with caution)
  -b|--build-ignore (FALSE|TRUE):
    if TRUE, only offer to upgrade on version changes (not build number changes).
  -c|--noclean (FALSE|TRUE):
    if TRUE, do not clean working directories after building.
  -D|--dry-run:
    show the potential queue and exit
  -d|--distclean (FALSE|TRUE):
    if TRUE, delete downloaded source archives and the completed package after building.
  -f|--force:
    force an upgrade, even if the version and build number are the same.
  -i|--noinstall:
    do not run upgradepkg at the end of the build process.
  -j|--jobs (FALSE|#):
    specify the number of parallel jobs (make).
  -o|--norecall:
    do not use saved build options with nointeractive.
  -p|--compat32:
    install a -compat32 package (multilib systems only).
  -q|--reverse-rebuild:
    rebuild the reverse dependency queue after upgrading.
  -r|--nointeractive:
    non-interactive; skips README and all prompts.
  -S|--strict-upgrades (FALSE|TRUE):
    if TRUE, SBo upgrades only when the version or build number is higher.
  -z|--force-reqs:
    rebuild dependencies as well.

EOF
	return 1;
}

my $noclean = $config{NOCLEAN};
my $distclean = $config{DISTCLEAN};
my $jobs = $config{JOBS};
my $build_ignore = $config{BUILD_IGNORE};
my $gpg = $config{GPG_VERIFY};
my $strict_upgrades = $config{STRICT_UPGRADES};
my ($help, $vers, $force, $no_install, $no_recall, $non_int, $force_reqs, $reverse, $compat32, $all, $yes_really, $dry_run);

my $options_ok = GetOptions(
	'help|h'            => \$help,
	'version|v'         => \$vers,
	'noclean|c=s'       => \$noclean,
	'distclean|d=s'     => \$distclean,
	'force|f'           => \$force,
	'noinstall|i'       => \$no_install,
	'norecall|o'        => \$no_recall,
	'jobs|j=s'          => \$jobs,
	'reverse-rebuild|q' => \$reverse,
	'nointeractive|r'   => \$non_int,
	'force-reqs|z'      => \$force_reqs,
	'build-ignore|b=s'	=> \$build_ignore,
	'all'               => \$all,
	'strict-upgrades|S=s' => \$strict_upgrades,
	'compat32|p'        => \$compat32,
	'batch'             => \$yes_really,
	'dry-run|D'         => \$dry_run,
);

if ($help) {
	show_usage();
	wrapsay "Non-root users can call $self with -D, -v and -h." unless $< == 0;
	exit 0;
}
if ($vers) { show_version(); exit 0 }
unless ($< == 0 or $dry_run) {
	show_usage();
	usage_error "Non-root users can call $self with -D, -v and -h.";
}
unless ($options_ok) {
	show_usage();
	usage_error "One or more invalid options detected.";
}

lint_sbo_config($self, %config);

# invalid parameters may have been passed from the command line
if ($noclean) {
	usage_error("You have provided an invalid value for -c|--noclean")
		unless ($noclean =~ /^(TRUE|FALSE)$/);
}

if ($distclean) {
	usage_error("You have provided an invalid value for -d|--distclean")
		unless ($distclean =~ /^(TRUE|FALSE)$/);
}

if ($build_ignore) {
	usage_error("You have provided an invalid value for -b|--build-ignore")
		unless ($build_ignore =~ /^(TRUE|FALSE)$/);
}

if ($strict_upgrades) {
	usage_error("You have provided an invalid value for -S|--strict-upgrades")
		unless ($strict_upgrades =~ /^(TRUE|FALSE)$/);
}

if ($jobs) {
	usage_error("You have provided an invalid value for -j|--jobs")
		unless ($jobs =~ /^\d+$/ || $jobs eq 'FALSE');
}

$noclean = $noclean eq 'TRUE' ? 1 : 0;
$distclean = $distclean eq 'TRUE' ? 1 : 0;
$build_ignore = $build_ignore eq 'TRUE' ? 1 : 0;
$gpg = $gpg eq 'TRUE' ? 1 : 0;
# from here, only Pkgs.pm uses STRICT_UPGRADES
$config{STRICT_UPGRADES} = $strict_upgrades if $strict_upgrades;

usage_error("force-reqs is incompatible with nointeractive.")
	if $non_int && $force_reqs;
usage_error("reverse-rebuild is incompatible with noinstall.")
	if $reverse && $no_install;
usage_error("all is incompatible with compat32.")
	if $compat32 && $all;

$yes_really = 1 if $dry_run;
$non_int = 1 if $yes_really;

if ($gpg) { verify_gpg(); }

my $updates;
if ($all) {
	slackbuilds_or_fetch();
	print "Checking for updated SlackBuilds...\n";
	if ($build_ignore) {
		$updates = get_available_updates('VERS');
	} else {
		$updates = get_available_updates('BOTH');
	}
	push @ARGV, map { $_->{name} } @$updates;
	if (!@ARGV) { print "Nothing to update.\n"; exit 0 }
}

if (!@ARGV) { show_usage(); exit 1 }

# if we can't find SLACKBUILDS.TXT in $config{SBO_HOME}, prompt to fetch the tree
slackbuilds_or_fetch();

my @sbos;

# if a requested compat32 script is ineligible anyway,
# do not bother with its dependencies, etc.
if (@ARGV and $compat32) {
	for my $sbo (@ARGV) {
		my ($perl_ineligible, $arch_ineligible);
		my $sbo_location = get_sbo_location($sbo);
		if ($sbo_location) {
			my $check_location = $sbo_location;
			my $orig_location = get_orig_location($sbo);
			$check_location = $orig_location if $orig_location;
			$perl_ineligible = 1 if $sbo =~ /^perl-/ or basename(dirname($check_location)) eq "perl";
			unless ($perl_ineligible) {
				my ($fh, $exit) = open_fh("$sbo_location/$sbo.SlackBuild", "<") if -f "$sbo_location/$sbo.SlackBuild";
				unless ($exit) {
					for my $line (<$fh>) {
						$perl_ineligible = 1 if $line =~ /perl (Makefile|Build).PL/;
						$arch_ineligible = 1 if $line =~ /ARCH=noarch/;
					}
					close $fh;
				}
			}
		}
		push @sbos, $sbo unless $perl_ineligible or $arch_ineligible;
		wrapsay "$sbo is Perl-based; skipping compat32." if $perl_ineligible;
		wrapsay "$sbo is a noarch script; skipping compat32." if $arch_ineligible and not $perl_ineligible;
	}
} elsif (@ARGV) {
	@sbos = @ARGV;
}
exit 0 if (@ARGV and not @sbos);
@sbos = uniq @sbos;

# Filter out standard packages
my $std_installs = get_inst_names(get_installed_packages('STD'));
my %std_names;
$std_names{$_} = 1 for @$std_installs;
@sbos = grep { not $std_names{$_} } @sbos;

# pull locations for everything specified on command line.
my %locations;
for my $sbo (@sbos) {
	my $name = $sbo;
	$name =~ s/-compat32//;
	$locations{$sbo} = get_sbo_location($name);
	if (not $locations{$sbo} and in($sbo, @sbos) and $non_int and not $yes_really) {
		usage_error("Unable to locate $sbo and using nointeractive.");
	}
}

# get a list of installed SBos to check upgradability against,
# and perl modules from CPAN
my $inst_names = get_inst_names(get_installed_packages('SBO'));
my %inst_names;
$inst_names{$_} = 1 for @$inst_names;
my %updates;
if (not $non_int or not $force) {
	if ($build_ignore) {
		$updates = get_available_updates('VERS') if not defined $updates;
	} else {
		$updates = get_available_updates('BOTH') if not defined $updates;
	}
	$updates{$$_{name}} = 1 for @$updates;
}
my ($pms, $defective);
unless ($config{CPAN_IGNORE} eq "TRUE") {
	($pms, $defective) = get_installed_cpans();
	s/::/-/g for @$pms;
	s/::/-/g for @$defective;
}

my $upgrade_queue = [];
my @needs_reverse;
my (%warnings, $save_queue);

# ensure that compat32 is picked up on the upgrade list
if ($compat32) {
	for my $sbo (@sbos) { $sbo = "$sbo-compat32" unless $sbo =~ /-compat32$/; }
}

# doesn't matter what's updatable and what's not if force is specified,
# but without force, we only want to update what there are updates for
if ($non_int and not $reverse and not $yes_really) {
	my ($extra_queue, %extra_warnings);
	# --force, non-interactive
	if ($force) {
		for my $sbo (@sbos) {
			push @$upgrade_queue, $sbo if $inst_names{$sbo};
			if (auto_reverse($sbo) and not $no_install) {
				push @needs_reverse, $sbo;
				wrapsay "Reverse dependency rebuild for $sbo.";
			}
		}
	# non-interactive, no --force
	} else {
		for my $sbo (@sbos) {
			push @$upgrade_queue, $sbo if $updates{$sbo};
			if (auto_reverse($sbo) and not $no_install) {
				push @needs_reverse, $sbo;
				wrapsay "Reverse dependency rebuild for $sbo.";
			}
		}
	}
	$save_queue = $upgrade_queue;
} else {
	my @notified;
	for my $sbo (@sbos) {
		my ($extra_queue, %extra_warnings);
		my $name = $sbo;
		$name =~ s/-compat32$// unless $compat32 or $all;
		next if not $name;
		unless ($force_reqs or $force) {
			next unless $updates{$name};
		}
		my $queue = get_build_queue([$name], \%warnings);
		if (not $force_reqs) {
			@$queue = grep { !$inst_names{$_} or $updates{$_} } @$queue;
		}
		push @$queue, $name if $force;
		$upgrade_queue = merge_queues($upgrade_queue, $queue);
		# with --reverse-rebuild
		if ($reverse) {
			my $needs_compat;
			if ($sbo =~ /-compat32$/) {
				$needs_compat = 1;
				$sbo =~ s/-compat32$//;
			}
			($extra_queue, %extra_warnings) = get_full_reverse_queue($self, $updates, $sbo);
			if ($needs_compat) {
				$sbo = "$sbo-compat32";
				for my $item (@$extra_queue) {
					unless ($item =~ /-compat32$/) {
						$extra_warnings{"$item-compat32"} = $extra_warnings{$item};
						$item = "$item-compat32";
					}
				}
			}
		}
		$save_queue = merge_queues($save_queue, $upgrade_queue);
		if ($extra_queue) {
			%warnings = (%warnings, %extra_warnings);
			$upgrade_queue = merge_queues($upgrade_queue, $extra_queue);
		}
	}
	$upgrade_queue = rationalize_queue($upgrade_queue) if $reverse;
	# no --reverse-rebuild; trigger automatic rebuilds unless --no-install
	# and put everything in the right order
	unless ($no_install or $reverse) {
		$save_queue = $upgrade_queue;
		my ($extra_queue, %extra_warnings);
		for my $sbo (@$upgrade_queue) {
			if (auto_reverse($sbo)) {
				push @needs_reverse, $sbo;
				wrapsay "Reverse dependency rebuild for $sbo." unless grep { /^$sbo$/ } @notified;
				push @notified, $sbo;
			}
		}
	}
}

# handle all automatic reverse dependency rebuilds here
if (@needs_reverse and not $no_install and not $reverse) {
	my ($extra_queue, %extra_warnings);
	for my $sbo (@needs_reverse) {
		my $needs_compat;
		if ($sbo =~ /-compat32$/) {
			$sbo =~ s/-compat32$//;
			$needs_compat = 1;
		}
		($extra_queue, %extra_warnings) = get_full_reverse_queue($self, $updates, $sbo);
		if ($needs_compat) {
			for my $item (@$extra_queue) {
				unless ($item =~ /-compat32$/) {
					$extra_warnings{"$item-compat32"} = $extra_warnings{$item};
					$item = "$item-compat32" unless $item =~ /-compat32$/;
				}
			}
		}
		if ($extra_queue) {
			%warnings = (%warnings, %extra_warnings);
			$upgrade_queue = merge_queues($upgrade_queue, $extra_queue);
		}
	}
	$upgrade_queue = rationalize_queue($upgrade_queue);
}

# remove -compat32 here; note that --all needs to retain
if ($compat32) {
	for my $sbo (@$upgrade_queue) { $sbo =~ s/-compat32$//; }
	@$upgrade_queue = uniq @$upgrade_queue;
}

my $cqueue;
# get locations for all the things
my %locs = get_sbo_locations($upgrade_queue);
@locations{keys %locs} = values %locs;

# see what has been installed as part of a reverse
# dependency queue
my @reverses;
for my $sbo (@$upgrade_queue) { push @reverses, $sbo unless grep { /^$sbo$/ } @$save_queue; }

# Get user input regarding upgrades
my (@temp_queue, %commands, %options, %missing_user_group, @ignore_script);
my (@see_readme, %saved_options);
FIRST: for my $sbo (@$upgrade_queue) {
	my ($perl_ineligible, $arch_ineligible);
	next FIRST if $std_names{$sbo};
	next FIRST if $sbo =~ /-compat32$/ and not $all;
	my $name = $compat32 ? "$sbo-compat32" : $sbo;
	$locations{$name} = get_sbo_location($sbo) if $compat32 or $all;
	my $real_name = $sbo;
	$real_name =~ s/-compat32//;
	# do not attempt compat32 builds if noarch or perl-based; catch
	# ineligible scripts here, but skip them after checking for the base
	# package
	if ($name =~ /-compat32$/ and $locations{$name}) {
		my $check_location = $locations{$name};
		my $orig_location = get_orig_location($real_name);
		$check_location = $orig_location if $orig_location;
		$perl_ineligible = 1 if $name =~ /^perl-/ or basename(dirname($check_location)) eq "perl";
		unless ($perl_ineligible) {
			my ($fh, $exit) = open_fh("$locations{$name}/$real_name.SlackBuild", "<") if -f "$locations{$name}/$real_name.SlackBuild";
			next FIRST if $exit;
			for my $line (<$fh>) {
				$perl_ineligible = 1 if $line =~ /perl (Makefile|Build).PL/;
				$arch_ineligible = 1 if $line =~ /ARCH=noarch/;
			}
			close $fh;
		}
	}
	# for items in a reverse dependency rebuild queue, do not add
	# new compat32 packages unless they are a missing requirement
	if ($name =~ /-compat32/ and grep { /^$sbo$/ } @reverses) {
		my $needed_compat;
		unless ($inst_names{$name}) {
			for my $cand (@reverses) {
				next if $cand eq $sbo;
				my $cand_reqs = get_requires($cand);
				my $cand_name = $cand;
				$cand_name = "$cand_name-compat32" unless $cand_name =~ /-compat32$/;
				$needed_compat = 1 if grep { /^$sbo$/ } @$cand_reqs and $inst_names{$cand_name};
			}
		}
		next FIRST unless $inst_names{$name} or $needed_compat;
	}

	if (defined $warnings{$sbo} and $warnings{$sbo} eq 'nonexistent') {
		wrapsay "Unable to locate $sbo in the SlackBuilds.org tree.";
		if (not $non_int) {
			exit 0 unless prompt("Do you want to ignore it and continue?", default => 'yes');
		}
		next FIRST;
	}
	# will give %README% advisories later for --dry-run
	push @see_readme, $sbo if defined $warnings{$sbo} and $warnings{$sbo} eq '%README%';

	if ($sbo =~ /^perl-/ and $config{CPAN_IGNORE} ne "TRUE" and not $inst_names{$sbo}) {
		my $pm_name = $sbo;
		$pm_name =~ s/^perl-//;
		for my $pm (@$pms) {
			if ($pm =~ /^$pm_name$/i) {
				say "sbo installed via the CPAN.";
				next FIRST;
			}
			for my $pm (@$defective) {
				if ($pm =~ /^$pm_name$/i) {
					wrapsay "$sbo installed via the CPAN, but file(s) missing.";
				}
			}
		}
	}

	unless ($non_int) {
		# if compat32 is TRUE, we need to see if the non-compat version exists.
		if ($compat32 or $name =~ /-compat32$/) {
			unless ($inst_names{$sbo} or grep { /^$sbo$/ } @temp_queue) {
				say "$name requires $sbo." unless $perl_ineligible or $arch_ineligible;
				my ($cmds, $opts, $exit) = user_prompt($sbo, $locations{$sbo});
				if ($exit) {
					warn "Unable to open README for $sbo.\n";
					exit $exit;
				}
				if ($cmds) {
					next FIRST if $cmds eq 'N';
				}
				push(@temp_queue, $sbo);
				$commands{$sbo} = $cmds;
				$options{$sbo} = $opts;
				say "$sbo added to queue.";
			}
		}
		# actually skip ineligible compat32 builds here (interactive)
		if ($perl_ineligible) {
			wrapsay "$sbo is Perl-based; skipping compat32.";
			next FIRST;
		}
		if ($arch_ineligible) {
			wrapsay "$sbo is a noarch script; skipping compat32.";
			next FIRST;
		}
		my ($cmds, $opts, $exit) = user_prompt($name, $locations{$name});
		if ($exit) {
			warn "Unable to open README for $sbo.\n";
			exit $exit;
		}
		if ($cmds) {
			next FIRST if $cmds eq 'N';
		}
		push(@temp_queue, $name);
		$commands{$name} = $cmds;
		$options{$name} = $opts;
		say "$name added to upgrade queue.";
	} else {
		# for --batch, check for existing user and group, exiting
		# with a message if not
		if ($yes_really) {
			my $readme = get_readme_contents($locations{$real_name});
			unless (defined $readme) {
				warn "Unable to open README for $sbo.\n";
				exit _ERR_OPENFH;
			}
			my $cmds = get_user_group($readme, $locations{$real_name});
			if ($$cmds[0]) {
				unless (user_group_exist(@$cmds)) {
					if ($dry_run) {
						$missing_user_group{$sbo} = $cmds;
					} else {
						wrapsay "A required user or group is missing for $sbo:", 1;
						for my $cmd (@$cmds) { say $cmd; }
						say "";
						usage_error "Run these commands to install $sbo with --batch.";
					}
				}
			}
		}
		# reuse build options automatically if non-interactive
		# unless norecall is used
		my $base_needed;
		# add the required base script if --batch
		if ($yes_really and $name =~ /-compat32$/) {
			unless ($inst_names{$real_name} or grep { /^$real_name$/ } @temp_queue) {
				say "$name requires $real_name." unless $dry_run or $perl_ineligible or $arch_ineligible;
				$base_needed = 1;
			}
		}
		unless ($no_recall) {
			my $opts_log = "/var/log/sbotools/$real_name";
			if (-f $opts_log) {
				my ($prev_fh, $exit) = open_fh($opts_log, '<');
				if ($exit) {
					warn $prev_fh;
				} else {
					my $opts = <$prev_fh>;
					$saved_options{$name} = $opts if $dry_run;
					$options{$sbo} = $opts;
					$options{$real_name} = $opts if $base_needed;
				}
			}
		}
		# this can only happen if --batch or --dry-run
		if ($base_needed) {
			push(@temp_queue, $real_name);
			say "\n$real_name added to upgrade queue." unless $dry_run;
		}
		# for dry-run, do not want to notify the user of %README%, missing user/group
		# or saved build options unless the script will actually be built
		if ($dry_run and not $base_needed and ($perl_ineligible or $arch_ineligible)) {
			@see_readme = grep { !/^$real_name$/ } @see_readme;
			push @ignore_script, $name;
			push @ignore_script, $real_name;
		}
		# actually skip ineligible compat32 builds here (non-interactive)
		if ($perl_ineligible) {
			wrapsay "$real_name is Perl-based; skipping compat32.";
			next FIRST;
		}
		if ($arch_ineligible) {
			wrapsay "$real_name is a noarch script; skipping compat32.";
			next FIRST;
		}
		push(@temp_queue, $name);
		say "\n$name added to upgrade queue." unless $dry_run;
	}
}
@$upgrade_queue = @temp_queue;

exit 0 unless exists $$upgrade_queue[0];
if ($dry_run) {
	if (@see_readme) {
		wrapsay "\nSee README for:";
		for my $item (@see_readme) { say "  $item"; }
	}
	if (%saved_options) {
		say "\nSaved build options to be used:";
		for my $item (keys %saved_options) {
			say "  $item: $saved_options{$item}" unless grep { /^$item$/ } @ignore_script;
		}
	}
}
wrapsay "\nUpgrade queue: ". join(' ', @$upgrade_queue);
unless ($non_int) {
    exit 0 unless prompt("\nAre you sure you wish to continue?", default => 'yes');
}
if ($dry_run) {
	if (%missing_user_group) {
		for my $item (keys %missing_user_group) {
			unless (grep { /^$item$/ } @ignore_script) {
				wrapsay "\nA required user or group is missing for $item:", 1;
				for my $cmd (@{ $missing_user_group{$item} }) { say $cmd; }
				say "";
				wrapsay "Run these commands to install $item with --batch.";
			}
		}
	}
	exit 0;
}

my ($failures, $exit) = process_sbos(
	TODO      => $upgrade_queue,
	CMDS      => \%commands,
	OPTS      => \%options,
	JOBS      => $jobs,
	LOCATIONS => \%locations,
	NOINSTALL => $no_install,
	NOCLEAN   => $noclean,
	DISTCLEAN => $distclean,
	NON_INT   => $non_int,
);
print_failures($failures);

if ($exit) {
	exit $exit;
} else {
	exit 0;
}
