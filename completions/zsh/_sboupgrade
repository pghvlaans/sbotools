#compdef sboupgrade

# sbotools: https://pink-mist.github.io/sbotools/

# get a list of available upgrades
sboupdates=( ${(uf)"$(perl -MSBO::Lib::Pkgs=get_available_updates -E 'say $_->{name} for @{ get_available_updates("BOTH"); }')"} )

_arguments -s -C \
	   - info \
	   '(-)'{-h,--help}'[Show help]:' \
	   '(-)'{-v,--version}'[Show version information.]:' \
	   - commands \
	   '(${sboupdates})--all[Upgrade all from sbocheck.]' \
	   '(-b --build-ignore)'{-b,--build-ignore}'[If TRUE, then only do upgrades if the version number differs.]:ignore build number?:((TRUE\:"Version upgrades only" FALSE\:"Script bump upgrades"))' \
	   '(-c --noclean)'{-c,--noclean}'[If TRUE, then do not clean working directories after build.]:clean work dirs?:((TRUE\:"Clean works directories" FALSE\:"Keep work directories"))' \
	   '(-d --distclean)'{-d,--distclean}'[If TRUE, then remove source code and the package after building.]:clean source and package?:((TRUE\:"Remove source and package" FALSE\:"Keep source and package"))' \
	   '(-j --jobs)'{-j,--jobs}'[Number fed to -j# for make.]:number of jobs (make):()' \
	   '(-R --reverse-rebuild)'{-R,--reverse-rebuild}'[Rebuild the reverse dependency queue after upgrading.]' \
	   '(-r --nointeractive)'{-r,--nointeractive}'[Skip README.]' \
	   '(-f --force)'{-f,--force}'[Force an upgrade (ignore version).]' \
	   '(-z --force-reqs)'{-z,--force-reqs}'[Force update of requirements.]' \
	   '(-i --noinstall)'{-i,--noinstall}'[Build package but do not install.]' \
	   '(-S --strict-upgrades)'{-S,--strict-upgrades}'[If TRUE, then only perform non-override upgrades if the version or build number is greater.]:strict versions?:((TRUE\:"Strict upgrades only." FALSE\:"Upgrade on differing version and build number."))' \
	   '(-)*:SlackBuild:(${sboupdates:|words})' \
    && return 0

return 1

# Local Variables:
# mode: sh
# End:
