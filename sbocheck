#!/usr/bin/perl
#
# vim: ts=4:noet
#
# sbocheck
# script to update the local sbo tree and check for updates
#
# authors: Jacob Pipkin <j@dawnrazor.net>
#          Luke Williams <xocel@iquidus.org>
#          Andreas Guldstrand <andreas.guldstrand@gmail.com>
# maintainer: K. Eugene Carlson <kvngncrlsn@gmail.com>
# license: MIT License

use 5.16.0;
use strict;
use warnings FATAL => 'all';
use SBO::Lib qw/ update_tree fetch_tree get_available_updates get_removed_builds script_error open_fh is_local show_version get_local_outdated_versions $slackbuilds_txt slackbuilds_or_fetch verify_gpg %config /;
use Getopt::Long;
use File::Basename;
use List::Util 'max';
use Data::Dumper;

my $self = basename($0);

sub show_usage {
	print <<"EOF";
Usage: $self

Options:
  -h|--help:
    this screen.
  -v|--version:
    version information.
  -g|--gpg-verify:
    perform gpg verification.
  -n|--nopull:
    run without updating the tree.

EOF
	return 1;
}

my ($help, $vers, $gpg, $nopull);

GetOptions('help|h' => \$help, 'version|v' => \$vers, 'gpg-verify|g' => \$gpg, 'nopull|n' => \$nopull);

if ($help) { show_usage(); exit 0 }
if ($vers) { show_version(); exit 0 }

if (not $gpg) {
	$gpg = $config{GPG_VERIFY} if not $gpg;
	$gpg = $gpg eq 'TRUE' ? 1 : 0;
}
if ($gpg and $nopull) { verify_gpg(); }
elsif ($gpg) { $config{GPG_VERIFY} = "TRUE"; }

update_tree() unless $nopull;
if ($nopull and not -f $slackbuilds_txt) {
	slackbuilds_or_fetch();
} elsif ($nopull) {
	print "Not updating the SlackBuilds tree...\n";
}

# retrieve and format list of removed builds
sub get_removed_list {
	print "Checking for out-of-tree builds...";
	my @removes = @{ get_removed_builds() };

	my %removes;
	for my $remove (@removes) {
		$removes{$remove->{name}} = {
			installed => $remove->{installed}
		};
	}

	my @remove_list;
	foreach my $gone (keys %removes) {
		my $info = $removes{$gone};
		my $item = sprintf "%s %s", $gone, $info->{installed};
		push @remove_list, $item;
	}

	return @remove_list;
}

# retrieve and format list of available updates
sub get_update_list {
	my $filter = shift;
	if ($filter eq 'VERS') {
		if ($config{CLASSIC} ne "TRUE") { print "\nChecking for updated SlackBuilds..."; }
		else { print "Checking for updated SlackBuilds...\n"; }
	}
	if ($filter eq 'BUILD') { print "Checking for bumped SlackBuilds..."; }
	my @updates = @{ get_available_updates($filter) };
	my @outdated = get_local_outdated_versions($filter);
	return() unless @outdated + @updates;

	my %updates;
	for my $update (@updates) {
		$updates{$update->{name}} = {
			installed => $update->{installed},
			available => $update->{update},
			local => is_local($update->{name})
		};
		if ($filter eq 'BUILD') { $updates{$update->{name}}{available} = $update->{bump}; }
	}
	for my $update (@outdated) {
		my $name = $update->{name};
		$updates{$name}{installed} = $update->{version};
		$updates{$name}{sbo} = $update->{orig};
		$updates{$name}{local} = 1;
	}

# Output should look like this where the < is aligned to the longest sboname 1.0 string (excepting ones that would then wrap):
# sboname 1.0  <  needs updating (1.1 from overrides)
# sboname 1.0  <  needs updating (1.1 from SBo)
# sboname 1.0  <  needs updating (1.1 from overrides, 1.2 from SBo)
# sboname 1.0  <  override outdated (1.1 from SBo)

	my $max = 0;
	foreach my $sbo (keys %updates) {
		my $info = $updates{$sbo};
		my $current = sprintf "%s %s", $sbo, $info->{installed};

		my $available = '';
		if (defined $info->{available} and defined $info->{sbo}) {
			if ($filter eq 'VERS') { $available = sprintf "needs updating (%s from overrides, %s from SBo)", $info->{available}, $info->{sbo}; }
			if ($filter eq 'BUILD') { $available = sprintf "was bumped (build %s from overrides, %s from SBo)", $info->{available}, $info->{sbo}; }
		}
		elsif ($info->{available}) {
			if ($filter eq 'VERS') { $available = sprintf "needs updating (%s from %s)", $info->{available}, $info->{local} ? "overrides" : "SBo"; }
			if ($filter eq 'BUILD') { $available = sprintf "was bumped (build %s from %s)", $info->{available}, $info->{local} ? "overrides" : "SBo"; }
		}
		else {
			if ($filter eq 'VERS') { $available = sprintf "override outdated (%s from SBo)", $info->{sbo}; }
			if ($filter eq 'BUILD') { $available = sprintf "was bumped (build %s from SBo)", $info->{sbo}; }
		}
		$info->{name_str} = $current;
		$info->{upd_str} = $available;

		my $str = sprintf "%s  <  %s", $current, $available;
		if (length($str) <= 80) {
			$max = length($current) if length($current) > $max;
		}
	}

	my @listing;
	foreach my $sbo (sort keys %updates) {
		my $info = $updates{$sbo};

		my $str = sprintf "%s  <  %s", $info->{name_str}, $info->{upd_str};
		if (length($str) <= 80) {
			$str = sprintf "%-*s  <  %s", $max, $info->{name_str}, $info->{upd_str};
			my $adjust = 1;
			while (length($str) > 80) {
				$str = sprintf "%-*s  <  %s", $max-$adjust++, $info->{name_str}, $info->{upd_str};
			}
		}
		push @listing, $str;
	}
	return @listing;
}

# print a list
sub print_output {
	my $logfile = shift;
	my @listing = @_;
	my $message = "";
	if($logfile eq '/var/log/sbocheck.log') {
		if ($config{CLASSIC} ne "TRUE") { $message="\tNo version updates available."; }
		else { $message="\nNo version updates available.\n"; }
	}
	if($logfile eq '/var/log/sbocheck-bumps.log') { $message="\tNo build numbers differ."; }
	if($logfile eq '/var/log/sbocheck-out-of-tree.log') { $message="\tNo out-of-tree _SBo builds."; }
	if (@listing) {
		if ($config{CLASSIC} ne "TRUE") { print "\tSee $logfile.\n\n"; }
		else { print "\n"; }
		say $_ for @listing;
		print "\n";
		# save a log of available updates
		unlink $logfile if -f $logfile;
		my ($log_fh, $exit) = open_fh($logfile, '>');
		# non-fatal
		if ($exit) {
			warn $log_fh;
		} else {
			say {$log_fh} $_ for @listing;
			close $log_fh;
			if ($config{CLASSIC} eq "TRUE") { say "A copy of the above result is kept in $logfile.\n"; }
		}
	} else {
		say "$message";
	}
	return 1;
}

my @listing = get_update_list('VERS');
print_output('/var/log/sbocheck.log', @listing);
if ($config{CLASSIC} ne "TRUE") {
	my @bumps = get_update_list('BUILD');
	print_output('/var/log/sbocheck-bumps.log', @bumps);
	my @removed = get_removed_list();
	print_output('/var/log/sbocheck-out-of-tree.log', @removed);
}

exit 0;
