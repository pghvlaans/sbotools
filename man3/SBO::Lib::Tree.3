.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "SBO::Lib::Tree 3"
.TH SBO::Lib::Tree 3 "Boomtime, Bureaucracy 63, 3191 YOLD" "" "sbotools 4.0"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SBO::Lib::Tree \- Routines for interacting with a SlackBuilds.org tree.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use SBO::Lib::tree qw/ is_local /;
\&
\&  my $bool = is_local($sbo);
.Ve
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS get_all_available
.IX Subsection "get_all_available"
.Vb 1
\&  my @available = get_all_available();
.Ve
.PP
\&\f(CWget_all_available()\fR returns an array of available scripts based on \f(CW\*(C`SLACKBUILDS.TXT\*(C'\fR
and the contents of the \f(CW\*(C`LOCAL_OVERRIDES\*(C'\fR directory. This subroutine may be called
in lieu of \f(CWget_sbo_locations()\fR near the start of the script.
.SS get_orig_location
.IX Subsection "get_orig_location"
.Vb 1
\&  my $loc = get_orig_location($sbo);
.Ve
.PP
\&\f(CWget_orig_location()\fR returns the location in the SlackBuilds.org tree for the
given \f(CW$sbo\fR. Ensure that either \f(CWget_sbo_locations()\fR or \f(CWget_all_available()\fR
is run before attempting \f(CWget_orig_location()\fR.
.SS get_sbo_description
.IX Subsection "get_sbo_description"
.Vb 1
\&  my $description = get_sbo_description($sbo);
.Ve
.PP
\&\f(CWget_sbo_description()\fR returns the short description for \f(CW$sbo\fR. Ensure that either
\&\f(CWget_sbo_locations()\fR or \f(CWget_all_available()\fR is run before attempting
\&\f(CWget_sbo_description()\fR.
.SS get_sbo_location
.IX Subsection "get_sbo_location"
.Vb 1
\&  my $loc = get_sbo_location($sbo);
.Ve
.PP
\&\f(CWget_sbo_location()\fR returns the location in \f(CW\*(C`LOCAL_OVERRIDES\*(C'\fR or the
SlackBuilds.org tree for \f(CW$sbo\fR. Ensure that either \f(CWget_sbo_locations()\fR
or \f(CWget_all_available()\fR is run before attempting \f(CWget_sbo_location()\fR.
.SS get_sbo_locations
.IX Subsection "get_sbo_locations"
.Vb 1
\&  my %locations = get_sbo_locations();
.Ve
.PP
\&\f(CW\*(C`get_sbo_locations\*(C'\fR finds all SlackBuilds in \f(CW@sbos\fR and returns a hash matching each
package name to its location. After \f(CWget_sbo_locations()\fR has been run for the first time,
it simply returns the hash again in subsequent calls.
.PP
The descriptions hash is populated as well on the first run.
.SS is_local
.IX Subsection "is_local"
.Vb 1
\&  my $bool = is_local($sbo);
.Ve
.PP
\&\f(CWis_local()\fR checks whether the given \f(CW$sbo\fR (or, for \f(CW\*(C`compat32\*(C'\fR, the base script)
is in the \f(CW\*(C`LOCAL_OVERRIDES\*(C'\fR directory. The return value is true if it is, and false
if it is not.
.SS renew_sbo_locations
.IX Subsection "renew_sbo_locations"
.Vb 1
\&  my %locations = renew_sbo_locations();
.Ve
.PP
\&\f(CWrenew_sbo_locations()\fR clears all location\- and description\-related hashes
and the available script array. It then runs \f(CWget_sbo_locations()\fR and returns
the new locations hash.
.SH "EXIT CODES"
.IX Header "EXIT CODES"
Tree.pm subroutines can return the following exit code:
.PP
.Vb 2
\&  _ERR_SCRIPT        2   script or module bug
\&  _ERR_OPENFH        6   failure to open file handles
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSBO::Lib\fR\|(3), \fBSBO::Lib::Build\fR\|(3), \fBSBO::Lib::Download\fR\|(3), \fBSBO::Lib::Info\fR\|(3), \fBSBO::Lib::Pkgs\fR\|(3), \fBSBO::Lib::Readme\fR\|(3), \fBSBO::Lib::Repo\fR\|(3), \fBSBO::Lib::Util\fR\|(3)
.SH AUTHORS
.IX Header "AUTHORS"
SBO::Lib was originally written by Jacob Pipkin <j@dawnrazor.net> with
contributions from Luke Williams <xocel@iquidus.org> and Andreas
Guldstrand <andreas.guldstrand@gmail.com>.
.SH MAINTAINER
.IX Header "MAINTAINER"
SBO::Lib is maintained by K. Eugene Carlson <kvngncrlsn@gmail.com>.
.SH LICENSE
.IX Header "LICENSE"
The sbotools are licensed under the MIT License.
.PP
Copyright (C) 2012\-2017, Jacob Pipkin, Luke Williams, Andreas Guldstrand.
.PP
Copyright (C) 2024\-2025, K. Eugene Carlson.
