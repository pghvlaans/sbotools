.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SBO::Lib::Readme 3"
.TH SBO::Lib::Readme 3 "Prickle-Prickle, Chaos 29, 3191 YOLD" "" "sbotools 3.4.1"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SBO::Lib::Readme \- Routines for interacting with a typical SBo README file.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use SBO::Lib::Readme qw/ get_readme_contents /;
\&
\&  print get_readme_contents($sbo);
.Ve
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS ask_opts
.IX Subsection "ask_opts"
.Vb 1
\&  my $opts = ask_opts($sbo, $readme);
.Ve
.PP
\&\f(CWask_opts()\fR displays  \f(CW$readme\fR and asks if options should be set. If no options
are set, it returns \f(CW\*(C`undef\*(C'\fR. Saved options under \f(CW\*(C`/var/log/sbotools/$sbo\*(C'\fR are retrieved
and can be used again.
.SS ask_other_readmes
.IX Subsection "ask_other_readmes"
.Vb 1
\&  ask_other_readmes($sbo, $location);
.Ve
.PP
\&\f(CWask_other_readmes()\fR checks for secondary README files for \f(CW$sbo\fR in \f(CW$location\fR.
It displays the files one by one upon prompt.
.SS ask_user_group
.IX Subsection "ask_user_group"
.Vb 1
\&  my $bool = ask_user_group($cmds, $readme);
.Ve
.PP
\&\f(CWask_user_group()\fR displays the \f(CW$readme\fR and commands found in \f(CW$cmds\fR, and
prompts for running the \f(CW\*(C`useradd\*(C'\fR and \f(CW\*(C`groupadd\*(C'\fR commands found. If so, the \f(CW$cmds\fR are
returned; the return is otherwise \f(CW\*(C`undef\*(C'\fR.
.SS get_opts
.IX Subsection "get_opts"
.Vb 1
\&  my $bool = get_opts($readme);
.Ve
.PP
\&\f(CWget_opts()\fR checks the \f(CW$readme\fR for defined options in the form KEY=VALUE.
It returns a true value if any are found, and a false value otherwise.
.SS get_readme_contents
.IX Subsection "get_readme_contents"
.Vb 1
\&  my $contents = get_readme_contents($location);
.Ve
.PP
\&\f(CWget_readme_contents()\fR opens the README file in \f(CW$location\fR and returns
its contents. On error, it returns \f(CW\*(C`undef\*(C'\fR.
.SS get_user_group
.IX Subsection "get_user_group"
.Vb 1
\&  my @cmds = @{ get_user_group($readme) };
.Ve
.PP
\&\f(CWget_user_group()\fR searches the \f(CW$readme\fR for \f(CW\*(C`useradd\*(C'\fR and
\&\f(CW\*(C`groupadd\*(C'\fR commands, and returns them in an array reference.
.SS user_prompt
.IX Subsection "user_prompt"
.Vb 1
\&  my ($cmds, $opts, $exit) = user_prompt($sbo, $location);
.Ve
.PP
\&\f(CWuser_prompt()\fR is the main point of access to the other commands in \f(CW\*(C`Readme.pm\*(C'\fR.
It calls subroutines to find options and commands, and then prompts the user for
installation. Three values are potentially returned.
.PP
In case of error, the first is the error message and the third is a true value.
.PP
If the user refuses the prompt to build \f(CW$sbo\fR, the first value is \f(CW\*(AqN\*(Aq\fR.
.PP
If \f(CW$sbo\fR is to be built, the first value is the commands that would run
in advance, or \f(CW$undef\fR if none. The second value contains build options.
.PP
\&\fBNote\fR: This should really be changed.
.PP
\&\fBNote\fR: The previous note is old. I (KEC) agree that this module is asked to do
quite a lot. Keeping it in place might be the most parsimonious thing to do, but I
have yet to look into the question closely.
.SH AUTHORS
.IX Header "AUTHORS"
SBO::Lib was originally written by Jacob Pipkin <j@dawnrazor.net> with
contributions from Luke Williams <xocel@iquidus.org> and Andreas
Guldstrand <andreas.guldstrand@gmail.com>.
.PP
SBO::Lib is maintained by K. Eugene Carlson <kvngncrlsn@gmail.com>.
.SH LICENSE
.IX Header "LICENSE"
The sbotools are licensed under the MIT License.
.PP
Copyright (C) 2012\-2017, Jacob Pipkin, Luke Williams, Andreas Guldstrand.
.PP
Copyright (C) 2024\-2025, K. Eugene Carlson.
