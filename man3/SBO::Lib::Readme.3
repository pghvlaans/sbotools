.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "SBO::Lib::Readme 3"
.TH SBO::Lib::Readme 3 "Prickle-Prickle, The Aftermath 12, 3191 YOLD" "" "sbotools 4.1"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SBO::Lib::Readme \- Routines for interacting with a typical SBo README file.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use SBO::Lib::Readme qw/ get_readme_contents /;
\&
\&  print get_readme_contents($sbo);
.Ve
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS ask_opts
.IX Subsection "ask_opts"
.Vb 1
\&  my $opts = ask_opts($sbo, $readme);
.Ve
.PP
\&\f(CWask_opts()\fR asks if options should be set. If no options are set, it returns \f(CW\*(C`undef\*(C'\fR.
Saved options under \f(CW\*(C`/var/log/sbotools/$sbo\*(C'\fR are retrieved and can be used again. For
\&\f(CW\*(C`compat32\*(C'\fR packages, saved options are shared with the base script.
.SS ask_other_readmes
.IX Subsection "ask_other_readmes"
.Vb 1
\&  ask_other_readmes($sbo, $location);
.Ve
.PP
\&\f(CWask_other_readmes()\fR checks for secondary README files for \f(CW$sbo\fR in \f(CW$location\fR.
It displays the files one by one upon prompt.
.SS ask_user_group
.IX Subsection "ask_user_group"
.Vb 1
\&  my $bool = ask_user_group($cmds);
.Ve
.PP
\&\f(CWask_user_group()\fR takes the \f(CWuseradd(1)\fR and \f(CWgroupadd(1)\fR commands found in a
\&\f(CW\*(C`README\*(C'\fR file and calls \f(CWuser_group_exist()\fR; if at least one of the specified
users or groups does not exist, it prompts for running the commands. If yes,
the \f(CW$cmds\fR are returned, and \f(CW\*(C`undef\*(C'\fR otherwise.
.SS get_readme_contents
.IX Subsection "get_readme_contents"
.Vb 1
\&  my $contents = get_readme_contents($location);
.Ve
.PP
\&\f(CWget_readme_contents()\fR opens the README file in \f(CW$location\fR and returns
its contents. On error, it returns \f(CW\*(C`undef\*(C'\fR.
.SS get_user_group
.IX Subsection "get_user_group"
.Vb 1
\&  my @cmds = @{ get_user_group($readme, $location) };
.Ve
.PP
\&\f(CWget_user_group()\fR searches the \f(CW$readme\fR in \f(CW$location\fR for \f(CWuseradd(1)\fR and
\&\f(CWgroupadd(1)\fR commands, and returns them in an array reference. If no
commands are found initially, it searches any other \f(CW\*(C`README*\*(C'\fR files for
them.
.SS user_group_exist
.IX Subsection "user_group_exist"
.Vb 1
\&  my $user_group_exist = user_group_exist(@cmds);
.Ve
.PP
\&\f(CWuser_group_exist()\fR takes an array of sugested commands generated by \f(CWget_user_group()\fR,
returning a true value if the user and group exist and an undefined value if they do not.
.SS user_prompt
.IX Subsection "user_prompt"
.Vb 1
\&  my ($proceed, $cmds, $opts) = user_prompt($sbo, $location);
.Ve
.PP
\&\f(CWuser_prompt()\fR is the main point of access to the other commands in \f(CW\*(C`Readme.pm\*(C'\fR.
It calls subroutines to find options and commands, and then prompts the user for
installation. It returns the answer to the installation prompt (true for \*(Aqyes\*(Aq and
false for \*(Aqno\*(Aq), the list of commands and the list of options.
.PP
The script exits if a non\-empty \f(CW\*(C`README\*(C'\fR file cannot be read.
.SH "EXIT CODES"
.IX Header "EXIT CODES"
Readme.pm subroutines can return the following exit codes:
.PP
.Vb 4
\&  _ERR_USAGE         1   usage errors
\&  _ERR_SCRIPT        2   script or module bug
\&  _ERR_OPENFH        6   failure to open file handles
\&  _ERR_STDIN         16  reading keyboard input failed
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSBO::Lib\fR\|(3), \fBSBO::Lib::Build\fR\|(3), \fBSBO::Lib::Download\fR\|(3), \fBSBO::Lib::Info\fR\|(3), \fBSBO::Lib::Pkgs\fR\|(3), \fBSBO::Lib::Repo\fR\|(3), \fBSBO::Lib::Solibs\fR\|(3), \fBSBO::Lib::Tree\fR\|(3), \fBSBO::Lib::Util\fR\|(3), \fBgroupadd\fR\|(1), \fBuseradd\fR\|(1)
.SH AUTHORS
.IX Header "AUTHORS"
SBO::Lib was originally written by Jacob Pipkin <j@dawnrazor.net> with
contributions from Luke Williams <xocel@iquidus.org> and Andreas
Guldstrand <andreas.guldstrand@gmail.com>.
.SH MAINTAINER
.IX Header "MAINTAINER"
SBO::Lib is maintained by K. Eugene Carlson <kvngncrlsn@gmail.com>.
.SH LICENSE
.IX Header "LICENSE"
The sbotools are licensed under the MIT License.
.PP
Copyright (C) 2012\-2017, Jacob Pipkin, Luke Williams, Andreas Guldstrand.
.PP
Copyright (C) 2024\-2025, K. Eugene Carlson.
