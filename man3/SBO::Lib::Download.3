.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "SBO::Lib::Download 3"
.TH SBO::Lib::Download 3 "Prickle-Prickle, Confusion 43, 3191 YOLD" "" "sbotools 3.7"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SBO::Lib::Download \- Routines for downloading SlackBuild sources.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use SBO::Lib::Download qw/ check_distfiles /;
\&
\&  my ($ret, $exit) = check_distfiles(LOCATION => $loc);
.Ve
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS check_distfiles
.IX Subsection "check_distfiles"
.Vb 1
\&  my ($ret, $exit) = check_distfiles(LOCATION => $loc);
.Ve
.PP
\&\f(CWcheck_distfiles()\fR gets the list of downloads from \f(CW$loc\fR. Any previously\-downloaded
files have their checksums verified. Missing and unverifiable files are downloaded to
md5sum\-designated directories and verified. Finally, \f(CWcreate_symlinks()\fR is run on each
download.
.PP
In case of success, an array of symlinks from \f(CWcreate_symlinks()\fR is returned. In case of
failure, an error message and an exit code are returned.
.SS compute_md5sum
.IX Subsection "compute_md5sum"
.Vb 1
\&  my $md5sum = compute_md5sum($file);
.Ve
.PP
\&\f(CWcompute_md5sum()\fR computes and returns the md5sum of the file in \f(CW$file\fR.
.SS create_symlinks
.IX Subsection "create_symlinks"
.Vb 1
\&  my @symlinks = @{ create_symlinks($location, {%downloads}) };
.Ve
.PP
\&\f(CWcreate_symlinks()\fR creates symlinks for the an array \f(CW%downloads\fR in
\&\f(CW$location\fR, returning an array reference of the symlinks created.
.SS get_distfile
.IX Subsection "get_distfile"
.Vb 1
\&  my ($msg, $err) = get_distfile($link, $md5);
.Ve
.PP
\&\f(CWget_distfile()\fR downloads from the URL \f(CW$link\fR with \f(CWwget(1)\fR and compares
the md5sum to \f(CW$md5\fR. The file is saved in an md5sum\-designated directory.
The subroutine returns a message and an error code upon failure, and 1 upon success.
.SS get_dl_fns
.IX Subsection "get_dl_fns"
.Vb 1
\&  my @filenames = @{ get_dl_fns([@links]) };
.Ve
.PP
\&\f(CWget_dl_fns()\fR returns the filenames of the items in \f(CW@links\fR in an
array reference.
.SS get_filename_from_link
.IX Subsection "get_filename_from_link"
.Vb 1
\&  my $path = get_filename_from_link($link, $md5);
.Ve
.PP
\&\f(CWget_filename_from_link()\fR returns the full path to the file downloaded from
\&\f(CW$link\fR, given its required md5sum, \f(CW$md5\fR.
.SS get_sbo_downloads
.IX Subsection "get_sbo_downloads"
.Vb 1
\&  my %downloads = %{ get_sbo_downloads(LOCATION => $loc) };
.Ve
.PP
\&\f(CWget_sbo_downloads()\fR gets the download links and md5sums for the SlackBuild
in location \f(CW$loc\fR, returning them in a hash reference.
.SS get_symlink_from_filename
.IX Subsection "get_symlink_from_filename"
.Vb 1
\&  my $symlink = get_symlink_from_filename($path, $loc);
.Ve
.PP
\&\f(CWget_symlink_from_filename()\fR, given a source file at \f(CW$path\fR and a location \f(CW$loc\fR,
returns the path of the generated symlink.
.SS verify_distfile
.IX Subsection "verify_distfile"
.Vb 1
\&  my $bool = verify_distfile($link, $md5);
.Ve
.PP
\&\f(CWverify_distfile()\fR verifies that the file downloaded from \f(CW$link\fR has an
md5sum equal to \f(CW$md5\fR.
.SH "EXIT CODES"
.IX Header "EXIT CODES"
Download.pm subroutines can return the following exit codes:
.PP
.Vb 4
\&  _ERR_SCRIPT        2   script or module bug
\&  _ERR_MD5SUM        4   download verification failure
\&  _ERR_DOWNLOAD      5   download failure
\&  _ERR_NOINFO        7   missing download information
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSBO::Lib\fR\|(3), \fBSBO::Lib::Build\fR\|(3), \fBSBO::Lib::Info\fR\|(3), \fBSBO::Lib::Pkgs\fR\|(3), \fBSBO::Lib::Readme\fR\|(3), \fBSBO::Lib::Repo\fR\|(3), \fBSBO::Lib::Tree\fR\|(3), \fBSBO::Lib::Util\fR\|(3)
.SH AUTHORS
.IX Header "AUTHORS"
SBO::Lib was originally written by Jacob Pipkin <j@dawnrazor.net> with
contributions from Luke Williams <xocel@iquidus.org> and Andreas
Guldstrand <andreas.guldstrand@gmail.com>.
.SH MAINTAINER
.IX Header "MAINTAINER"
SBO::Lib is maintained by K. Eugene Carlson <kvngncrlsn@gmail.com>.
.SH LICENSE
.IX Header "LICENSE"
The sbotools are licensed under the MIT License.
.PP
Copyright (C) 2012\-2017, Jacob Pipkin, Luke Williams, Andreas Guldstrand.
.PP
Copyright (C) 2024\-2025, K. Eugene Carlson.
