.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "SBO::Lib::Repo 3"
.TH SBO::Lib::Repo 3 "Prickle-Prickle, The Aftermath 12, 3191 YOLD" "" "sbotools 4.1"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SBO::Lib::Repo \- Routines for downloading and updating the SBo repository.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use SBO::Lib::Repo qw/ update_tree /;
\&
\&  update_tree();
.Ve
.SH VARIABLES
.IX Header "VARIABLES"
The location of all variables depends on the \f(CW\*(C`SBO_HOME\*(C'\fR config setting.
.ie n .SS $distfiles
.el .SS \f(CW$distfiles\fP
.IX Subsection "$distfiles"
\&\f(CW$distfiles\fR defaults to \f(CW\*(C`/usr/sbo/distfiles\*(C'\fR, and it is where all
downloaded sources are kept.
.ie n .SS $gpg_log
.el .SS \f(CW$gpg_log\fP
.IX Subsection "$gpg_log"
\&\f(CW$gpg_log\fR defaults to \f(CW\*(C`/usr/sbo/gpg.log\*(C'\fR, and it is where the output
of the most recent \f(CW\*(C`gnupg\*(C'\fR verification for the repository is kept. Other
\&\f(CW\*(C`gnupg\*(C'\fR logs are saved under \f(CW\*(C`/usr/sbo/file_name_here.asc.log\*(C'\fR.
.ie n .SS $repo_path
.el .SS \f(CW$repo_path\fP
.IX Subsection "$repo_path"
\&\f(CW$repo_path\fR defaults to \f(CW\*(C`/usr/sbo/repo\*(C'\fR, and it is where the
SlackBuilds.org tree is kept.
.ie n .SS $slackbuilds_txt
.el .SS \f(CW$slackbuilds_txt\fP
.IX Subsection "$slackbuilds_txt"
\&\f(CW$slackbuilds_txt\fR defaults to \f(CW\*(C`/usr/sbo/repo/SLACKBUILDS.TXT\*(C'\fR. It is
included in the official rsync repos, but not the git mirrors.
If this file exists, is non\-empty and \f(CW$repo_path\fR has an identical top\-level
directory structure to the SlackBuilds.org tree, pulling into an existent
\&\f(CW$repo_path\fR proceeds without prompting.
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS check_git_remote
.IX Subsection "check_git_remote"
.Vb 1
\&  my $bool = check_git_remote($path, $url);
.Ve
.PP
\&\f(CWcheck_git_remote()\fR checks if the repository at \f(CW$path\fR is a git repository.
If so, it checks for a defined \f(CW\*(C`origin\*(C'\fR remote matching \f(CW$url\fR. If so, it returns
a true value, and a false value otherwise.
.SS check_repo
.IX Subsection "check_repo"
.Vb 1
\&  my $bool = check_repo();
.Ve
.PP
\&\f(CWcheck_repo()\fR is used when the tree is to be fetched or updated.
It checks if the path in \f(CW$repo_path\fR exists and is an empty
directory, and returns a true value if so.
.PP
If \f(CW$repo_path\fR exists and is non\-empty, it is checked for
its resemblance to a complete SBo repository. The user receives
warning prompts varying in severity depending on whether
top\-level directories not belonging to the repository exist, repository
top\-level directories are missing or, in the worst case, both. Warnings are less
severe for \f(CW\*(C`git fetch\*(C'\fR, which would not delete \*(Aqextra\*(Aq files and
directories.
.PP
If \f(CW$repo_path\fR contains all expected category directories and
no unexpected directories, \f(CWcheck_repo()\fR returns a true value
if \f(CW$slackbuilds_txt\fR is non\-empty, and prompts the user if not.
.PP
If \f(CW$repo_path\fR does not exist, creation is attempted, returning a true
value on success. Creation failure results in a usage error.
.SS generate_slackbuilds_txt
.IX Subsection "generate_slackbuilds_txt"
.Vb 1
\&  my $bool = generate_slackbuilds_txt();
.Ve
.PP
\&\f(CWgenerate_slackbuilds_txt()\fR generates a minimal \f(CW\*(C`SLACKBUILDS.TXT\*(C'\fR for
repositories that do not include this file.
.PP
If the file cannot be opened for write, it returns a false value. Otherwise,
it returns a true value.
.SS get_obsolete
.IX Subsection "get_obsolete"
.Vb 1
\&  get_obsolete();
.Ve
.PP
\&\f(CWget_obsolete()\fR downloads a file from the \f(CW\*(C`sbotools\*(C'\fR home page listing scripts that are
known to have been added to Slackware \-current under different names, or to be obsolete
out\-of\-tree build dependencies. It is saved to \f(CW\*(C`/etc/sbotools/obsolete\*(C'\fR. The \f(CW\*(C`perl\*(C'\fR build
history file, \f(CW\*(C`/etc/sbotools/perl_vers\*(C'\fR, is downloaded as well.
.PP
\&\f(CW\*(C`gnupg\*(C'\fR verification is performed if \f(CW\*(C`GPG_VERIFY\*(C'\fR is \f(CW\*(C`TRUE\*(C'\fR. There is no useful return
value.
.SS git_sbo_tree
.IX Subsection "git_sbo_tree"
.Vb 1
\&  my $bool = git_sbo_tree($url);
.Ve
.PP
\&\f(CWgit_sbo_tree()\fR uses \f(CW\*(C`git clone \-\-no\-local\*(C'\fR on the repository specified by \f(CW$url\fR to the
\&\f(CW$repo_path\fR if the \f(CW$url\fR repository is not present. If it is, it uses \f(CW\*(C`git reset \-\-hard\*(C'\fR
to revert modifications to tracked files, followed by \f(CW\*(C`git fetch\*(C'\fR, \f(CW\*(C`git checkout \-\-detach\*(C'\fR
and \f(CW\*(C`git branch \-\-force\*(C'\fR to replace the existing branch with one from upstream. This avoids
problems with divergent branches.
.PP
If \f(CW\*(C`GIT_BRANCH\*(C'\fR is set, or if the running or configured Slackware version has a
recommended git branch, existence is checked with \f(CW\*(C`git ls\-remote\*(C'\fR. If the branch does not
exist, the user is prompted to continue. The script continues with the upstream default
branch if the repo is to be cloned, or with the existing branch otherwise.
.PP
If \f(CW\*(C`GPG_VERIFY\*(C'\fR is \f(CW\*(C`TRUE\*(C'\fR, \f(CW\*(C`gnupg\*(C'\fR verification proceeds with \f(CWverify_git_commit($branch)\fR
at the end of the subroutine.
.SS pull_sbo_tree
.IX Subsection "pull_sbo_tree"
.Vb 1
\&  pull_sbo_tree();
.Ve
.PP
\&\f(CWpull_sbo_tree()\fR pulls the SlackBuilds.org repository tree from
the default in \f(CW%supported\fR for the running Slackware version (accounting
for \f(CW\*(C`SLACKWARE_VERSION\*(C'\fR, \f(CW\*(C`RSYNC_DEFAULT\*(C'\fR and \f(CW\*(C`REPO\*(C'\fR). Afterwards, it
calls \f(CWget_obsolete()\fR to download the list of obsolete scripts from the
\&\f(CW\*(C`sbotools\*(C'\fR home page if appropriate.
.PP
Version support verification occurs in \f(CWget_slack_version_url()\fR
via \f(CWget_slack_version()\fR; see \f(CWSBO::Lib::Util(3)\fR.
.SS rsync_sbo_tree
.IX Subsection "rsync_sbo_tree"
.Vb 1
\&  my $bool = rsync_sbo_tree($url);
.Ve
.PP
\&\f(CWrsync_sbo_tree()\fR syncs the SlackBuilds.org repository to \f(CW$repo_path\fR from
the \f(CW$url\fR provided.
.PP
If \f(CW\*(C`GPG_VERIFY\*(C'\fR is \f(CW\*(C`TRUE\*(C'\fR, \f(CW\*(C`gnupg\*(C'\fR verification proceeds with \f(CWverify_rsync("fullcheck")\fR
at the end of the subroutine.
.SS slackbuilds_or_fetch
.IX Subsection "slackbuilds_or_fetch"
.Vb 1
\&  slackbuilds_or_fetch();
.Ve
.PP
\&\f(CWslackbuilds_or_fetch()\fR is called from \f(CWsbocheck(1)\fR, \f(CWsbofind(1)\fR, \f(CWsboinstall(1)\fR
and \f(CWsboupdate(1)\fR. It checks for the file \f(CW\*(C`SLACKBUILDS.TXT\*(C'\fR in
\&\f(CW$repo_path\fR. If this file is empty or does not exist, it offers to check the local
repository and fetch the tree.
.SS update_tree
.IX Subsection "update_tree"
.Vb 1
\&  update_tree();
.Ve
.PP
\&\f(CWupdate_tree()\fR checks for \f(CW\*(C`SLACKBUILDS.TXT\*(C'\fR in \f(CW$repo_path\fR to determine an
appropriate onscreen message. It then updates the SlackBuilds.org tree.
.PP
The local repository is checked for existence and similarity to the SBo repository
before any update proceeds.
.SS verify_git_commit
.IX Subsection "verify_git_commit"
.Vb 1
\&  verify_git_commit($branch);
.Ve
.PP
\&\f(CWverify_git_commit()\fR attempts to verify the GPG signature of the most
recent git commit, if any.
.SS verify_rsync
.IX Subsection "verify_rsync"
.Vb 1
\&  verify_rsync($fullcheck);
.Ve
.PP
\&\f(CWverify_rsync()\fR checks the signature of CHECKSUMS.md5.asc, prompting the user to download
the public key if not present. If "fullcheck" is passed (i.e., when syncing the local
repository), md5sum verification is performed as well.
.PP
Failure at any juncture leaves a lockfile \f(CW\*(C`.rsync.lock\*(C'\fR in \f(CW\*(C`SBO_HOME\*(C'\fR, which prevents
script installation and upgrade until the issue has been resolved, \f(CW\*(C`GPG_TRUE\*(C'\fR is set to
\&\f(CW\*(C`FALSE\*(C'\fR or the lockfile is removed.
.SS verify_gpg
.IX Subsection "verify_gpg"
.Vb 1
\&  verify_gpg();
.Ve
.PP
\&\f(CW\*(C`verify_gpg\*(C'\fR determines whether a git repo is in use, and then
runs \f(CWgpg(1)\fR verification. It is exportable, and is currently used in
\&\f(CWsboinstall(1)\fR, \f(CWsboupgrade(1)\fR and \f(CWsbocheck(1)\fR.
.SS verify_file
.IX Subsection "verify_file"
.Vb 1
\&  verify_file($asc);
.Ve
.PP
\&\f(CWverify_file()\fR runs \f(CW\*(C`gnupg\*(C'\fR verification, taking an \f(CW\*(C`asc\*(C'\fR file as the only
argument. There is no useful return value.
.SS retrieve_key
.IX Subsection "retrieve_key"
.Vb 1
\&  retrieve_key($fingerprint);
.Ve
.PP
\&\f(CW\*(C`retrieve_key\*(C'\fR attempts to retrieve a missing public key from
\&\f(CW\*(C`hkp://keyserver.ubuntu.com:80\*(C'\fR and add it to the keyring.
.PP
\&\f(CW\*(C`gnupg\*(C'\fR output is saved to \f(CW$key_log\fR, and the output of
\&\f(CW\*(C`gpg \-\-no\-batch \-\-search\-keys\*(C'\fR is displayed with a prompt to ensure
that the user can trust the key. The script exits with \f(CW\*(C`_ERR_GPG\*(C'\fR if
the download is declined.
.SH "EXIT CODES"
.IX Header "EXIT CODES"
Repo.pm subroutines can return the following exit codes:
.PP
.Vb 7
\&  _ERR_USAGE         1   usage errors
\&  _ERR_SCRIPT        2   script or module bug
\&  _ERR_MD5SUM        4   md5sum verification failure
\&  _ERR_DOWNLOAD      5   download failure
\&  _ERR_OPENFH        6   failure to open file handles
\&  _ERR_GPG           15  GPG verification failed
\&  _ERR_STDIN         16  reading keyboard input failed
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSBO::Lib\fR\|(3), \fBSBO::Lib::Build\fR\|(3), \fBSBO::Lib::Download\fR\|(3), \fBSBO::Lib::Info\fR\|(3), \fBSBO::Lib::Pkgs\fR\|(3), \fBSBO::Lib::Readme\fR\|(3), \fBSBO::Lib::Solibs\fR\|(3), \fBSBO::Lib::Tree\fR\|(3), \fBSBO::Lib::Util\fR\|(3), \fBgit\fR\|(1), \fBgpg\fR\|(1), \fBrsync\fR\|(1)
.SH AUTHORS
.IX Header "AUTHORS"
SBO::Lib was originally written by Jacob Pipkin <j@dawnrazor.net> with
contributions from Luke Williams <xocel@iquidus.org> and Andreas
Guldstrand <andreas.guldstrand@gmail.com>.
.SH MAINTAINER
.IX Header "MAINTAINER"
SBO::Lib is maintained by K. Eugene Carlson <kvngncrlsn@gmail.com>.
.SH LICENSE
.IX Header "LICENSE"
The sbotools are licensed under the MIT License.
.PP
Copyright (C) 2012\-2017, Jacob Pipkin, Luke Williams, Andreas Guldstrand.
.PP
Copyright (C) 2024\-2025, K. Eugene Carlson.
