.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SBO::Lib::Repo 3"
.TH SBO::Lib::Repo 3 "Setting Orange, The Aftermath 58, 3190 YOLD" "" "sbotools 3.1"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SBO::Lib::Repo \- Routines for downloading and updating the SBo repo.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use SBO::Lib::Repo qw/ fetch_tree /;
\&
\&  fetch_tree();
.Ve
.SH VARIABLES
.IX Header "VARIABLES"
.ie n .SS $distfiles
.el .SS \f(CW$distfiles\fP
.IX Subsection "$distfiles"
By default \f(CW$distfiles\fR is set to \f(CW\*(C`/usr/sbo/distfiles\*(C'\fR, and it is where all the
downloaded sources are kept.
.PP
The location depends on the \f(CW\*(C`SBO_HOME\*(C'\fR config setting.
.ie n .SS $repo_path
.el .SS \f(CW$repo_path\fP
.IX Subsection "$repo_path"
By default \f(CW$repo_path\fR is set to \f(CW\*(C`/usr/sbo/repo\*(C'\fR, and it is where the
SlackBuilds.org tree is kept.
.PP
The location depends on the \f(CW\*(C`SBO_HOME\*(C'\fR config setting.
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS check_git_remote
.IX Subsection "check_git_remote"
.Vb 1
\&  my $bool = check_git_remote($path, $url);
.Ve
.PP
\&\f(CWcheck_git_remote()\fR will check if the repository at \f(CW$path\fR is a git
repository and if so, it will check if it defined an \f(CW\*(C`origin\*(C'\fR remote that
matches the \f(CW$url\fR. If so, it will return a true value. Otherwise it will
return a false value.
.SS check_repo
.IX Subsection "check_repo"
.Vb 1
\&  my $bool = check_repo();
.Ve
.PP
\&\f(CWcheck_repo()\fR is used when SLACKBUILDS.txt cannot be found.
It checks if the path in \f(CW$repo_path\fR exists and is an empty
directory, and returns a true value if so.
.PP
If \f(CW$repo_path\fR exists and is non-empty, it may be malformed. The user
is prompted to regenerate SLACKBUILDS.TXT to proceed. A usage error results
if regeneration is declined.
.PP
If \f(CW$repo_path\fR does not exist, creation will be attempted, returning a true
value on success. Creation failure results in a usage error.
.SS chk_slackbuilds_txt
.IX Subsection "chk_slackbuilds_txt"
.Vb 1
\&  my $bool = chk_slackbuilds_txt();
.Ve
.PP
\&\f(CWchk_slackbuilds_txt()\fR checks if the file \f(CW\*(C`SLACKBUILDS.TXT\*(C'\fR exists in the
correct location, and returns a true value if it does, and a false value
otherwise.
.PP
Before the check is made, it attempts to call \f(CWmigrate_repo()\fR so it doesn't
give a false negative if the repository hasn't been migrated to its sbotools
2.0 location yet.
.SS fetch_tree
.IX Subsection "fetch_tree"
.Vb 1
\&  fetch_tree();
.Ve
.PP
\&\f(CWfetch_tree()\fR will make sure the \f(CW$repo_path\fR exists and is empty, and then
fetch the SlackBuilds.org repository tree there.
.PP
If the \f(CW$repo_path\fR is not empty, it will exit with a usage error.
.SS generate_slackbuilds_txt
.IX Subsection "generate_slackbuilds_txt"
.Vb 1
\&  my $bool = generate_slackbuilds_txt();
.Ve
.PP
\&\f(CWgenerate_slackbuilds_txt()\fR will generate a minimal \f(CW\*(C`SLACKBUILDS.TXT\*(C'\fR for a
repository that doesn't come with one. If it fails, it will return a false
value. Otherwise it will return a true value.
.SS git_sbo_tree
.IX Subsection "git_sbo_tree"
.Vb 1
\&  my $bool = git_sbo_tree($url);
.Ve
.PP
\&\f(CWgit_sbo_tree()\fR will \f(CW\*(C`git clone\*(C'\fR the repository specified by \f(CW$url\fR to the
\&\f(CW$repo_path\fR if the \f(CW$url\fR repository is not already there. If it is, it will
run \f(CW\*(C`git fetch && git reset \-\-hard origin\*(C'\fR.
.PP
If any command fails, it will return a false value. Otherwise it will return a
true value.
.SS migrate_repo
.IX Subsection "migrate_repo"
.Vb 1
\&  migrate_repo();
.Ve
.PP
\&\f(CWmigrate_repo()\fR moves an old sbotools 1.x repository to the location it needs
to be in for sbotools 2.x. This means every directory and file except for the
\&\f(CW\*(C`distfiles\*(C'\fR directory in (by default) \f(CW\*(C`/usr/sbo/\*(C'\fR gets moved to
\&\f(CW\*(C`/usr/sbo/repo\*(C'\fR.
.SS pull_sbo_tree
.IX Subsection "pull_sbo_tree"
.Vb 1
\&  pull_sbo_tree();
.Ve
.PP
\&\f(CWpull_sbo_tree()\fR will pull the SlackBuilds.org repository tree from
\&\f(CW\*(C`rsync://slackbuilds.org/slackbuilds/$ver/\*(C'\fR or whatever the \f(CW\*(C`REPO\*(C'\fR
configuration variable has been set to.
.PP
\&\f(CW$ver\fR is the version of Slackware you are running, provided it is supported,
or whatever you've set in the \f(CW\*(C`SLACKWARE_VERSION\*(C'\fR configuration variable.
.SS rsync_sbo_tree
.IX Subsection "rsync_sbo_tree"
.Vb 1
\&  my $bool = rsync_sbo_tree($url);
.Ve
.PP
\&\f(CWrsync_sbo_tree()\fR syncs the SlackBuilds.org repository to \f(CW$repo_path\fR from
the \f(CW$url\fR provided.
.SS slackbuilds_or_fetch
.IX Subsection "slackbuilds_or_fetch"
.Vb 1
\&  slackbuilds_or_fetch();
.Ve
.PP
\&\f(CWslackbuilds_or_fetch()\fR will check if there is a \f(CW\*(C`SLACKBUILDS.TXT\*(C'\fR in the
\&\f(CW$repo_path\fR, and if not, offer to run \f(CW\*(C`sbosnap fetch\*(C'\fR for you.
.SS update_tree
.IX Subsection "update_tree"
.Vb 1
\&  update_tree();
.Ve
.PP
\&\f(CWupdate_tree()\fR will check if there is a \f(CW\*(C`SLACKBUILDS.TXT\*(C'\fR in the
\&\f(CW$repo_path\fR, and if not, will run \f(CWfetch_tree()\fR. Otherwise it will update
the SlackBuilds.org tree.
.SS verify_git_commit
.IX Subsection "verify_git_commit"
.Vb 1
\&  verify_git_commit($branch);
.Ve
.PP
\&\f(CWverify_git_commit()\fR attempts to verify the GPG signature of the most
recent git commit, if any. Git commit verification is unavailable for
Slackware 14.0 and Slackware 14.1.
.SS verify_rsync
.IX Subsection "verify_rsync"
.Vb 1
\&  verify_rsync($fullcheck);
.Ve
.PP
\&\f(CWverify_rsync()\fR checks the signature of CHECKSUMS.md5.asc, prompting the user to download
the public key if not present. If "fullcheck" is passed (i.e., when syncing the local
repository), md5 verification is performed as well. Failure at any juncture leaves a lockfile
\&.rsync.lock in SBO_HOME, which prevents script installation and upgrade until the issue has
been resolved, GPG_TRUE is set to FALSE or the lockfile is removed.
.SS verify_gpg
.IX Subsection "verify_gpg"
.Vb 1
\&  verify_gpg();
.Ve
.PP
\&\f(CW\*(C`verify_gpg\*(C'\fR determines whether a git repo is in use, and then
runs GnuPG verification. It can be called from outside Repo.pm.
.SS retrieve_key
.IX Subsection "retrieve_key"
.Vb 1
\&  retrieve_key($fingerprint);
.Ve
.PP
\&\f(CW\*(C`retrieve_key\*(C'\fR attempts to retrieve a missing public key and add it to
the keyring.
.SH AUTHORS
.IX Header "AUTHORS"
SBO::Lib was originally written by Jacob Pipkin <j@dawnrazor.net> with
contributions from Luke Williams <xocel@iquidus.org> and Andreas
Guldstrand <andreas.guldstrand@gmail.com>.
.PP
SBO::Lib is maintained by K. Eugene Carlson <kvngncrlsn@gmail.com>.
.SH LICENSE
.IX Header "LICENSE"
The sbotools are licensed under the MIT License.
.PP
Copyright (C) 2012\-2017, Jacob Pipkin, Luke Williams, Andreas Guldstrand.
.PP
Copyright (C) 2024, K. Eugene Carlson.
