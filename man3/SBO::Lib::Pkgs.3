.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "SBO::Lib::Pkgs 3"
.TH SBO::Lib::Pkgs 3 "Pungenday, Confusion 62, 3191 YOLD" "" "sbotools 3.7"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SBO::Lib::Pkgs \- Routines for interacting with the Slackware package database.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use SBO::Lib::Pkgs qw/ get_installed_packages /;
\&
\&  my @installed_sbos = get_installed_packages(\*(AqSBO\*(Aq);
.Ve
.SH VARIABLES
.IX Header "VARIABLES"
.ie n .SS @native_libs
.el .SS \f(CW@native_libs\fP
.IX Subsection "@native_libs"
An array with shared objects (solibs) of the native architecture in the \f(CWldconfig(1)\fR cache.
It is generated by \f(CWsolib_check()\fR via \f(CWupdate_known_solibs()\fR if it is empty at the time
of calling.
.ie n .SS %old_libs
.el .SS \f(CW%old_libs\fP
.IX Subsection "%old_libs"
A hash with a per\-package list of apparently missing first\-order shared object dependencies.
It is generated when running \f(CWsolib_check()\fR.
.ie n .SS @x86_libs
.el .SS \f(CW@x86_libs\fP
.IX Subsection "@x86_libs"
An array with 32\-bit shared objects in the \f(CWldconfig(1)\fR cache. Used only under the
\&\f(CW\*(C`x86_64\*(C'\fR architecture, it is generated together with \f(CW@native_libs\fR by \f(CWupdate_known_solibs()\fR.
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS get_available_updates
.IX Subsection "get_available_updates"
.Vb 1
\&  my @updates = @{ get_available_updates() };
.Ve
.PP
\&\f(CWget_available_updates()\fR compares version and build number information for
packages installed with the _SBo tag with the local repository. It returns
an array reference to an array of hash references specifying package names,
installed versions and available versions.
.SS get_inst_names
.IX Subsection "get_inst_names"
.Vb 1
\&  my @names = get_inst_names(get_available_updates());
.Ve
.PP
\&\f(CWget_inst_names()\fR returns a list of package names from an array reference, such
as one returned by \f(CWget_available_updates()\fR.
.SS get_installed_cpans
.IX Subsection "get_installed_cpans"
.Vb 1
\&  my (@mods, @defective) = @{ get_installed_cpans() };
.Ve
.PP
\&\f(CWget_installed_cpans()\fR returns an array reference to a list of Perl
modules installed from the CPAN and a second array with installed modules
that have missing files. Modules are only fully recognized as installed if all
files in \f(CW\*(C`.packlist\*(C'\fR exist. This is used in \f(CWsboinstall(1)\fR and
\&\f(CWsboupgrade(1)\fR to prevent conflicting installations from the CPAN and
SlackBuilds.
.SS get_installed_packages
.IX Subsection "get_installed_packages"
.Vb 1
\&  my @packages = @{ get_installed_packages($type) };
.Ve
.PP
\&\f(CWget_installed_packages()\fR returns an array reference to a list of installed packages
matching the specified \f(CW$type\fR. The available types are \f(CW\*(C`STD\*(C'\fR for non\-SBo packages,
\&\f(CW\*(C`SBO\*(C'\fR for in\-tree _SBo and _SBocompat32 packages, \f(CW\*(C`DIRTY\*(C'\fR for out\-of\-tree _SBo packages
and \f(CW\*(C`ALL\*(C'\fR for all.
.PP
The returned array reference holds a list of hash references representing
the names, versions and full installed package names of the returned packages.
.SS get_local_outdated_versions
.IX Subsection "get_local_outdated_versions"
.Vb 1
\&  my @outdated = get_local_outdated_versions($filter);
.Ve
.PP
\&\f(CWget_local_outdated_versions()\fR checks installed SBo packages from \f(CW\*(C`LOCAL_OVERRIDES\*(C'\fR.
It returns an array with information about those that have version or build numbers
differing from the local repository or the SlackBuild in \f(CW\*(C`LOCAL_OVERRIDES\*(C'\fR.
.PP
This subroutine is used only by \f(CWsbocheck(1)\fR.
.SS get_removed_builds
.IX Subsection "get_removed_builds"
.Vb 1
\&  my @removed = get_removed_builds();
.Ve
.PP
\&\f(CWget_removed_builds()\fR returns an array of SlackBuild names and versions of all out\-of\-tree
installed packages marked \f(CW\*(C`_SBo\*(C'\fR.
.PP
This subroutine is used only by \f(CWsbocheck(1)\fR.
.SS solib_check
.IX Subsection "solib_check"
.Vb 1
\&  my $solibs_good = solib_check($pkg);
.Ve
.PP
\&\f(CWsolib_check()\fR takes the name of a package file and checks for the presence of any
required first\-order shared object dependencies as based on the \f(CW@native_libs\fR shared
object array. It returns 1 if all required shared objects appear to be present and 0
otherwise.
.PP
Because \f(CWelf_links()\fR is called (see \f(CWSBO::Lib::Util(3)\fR), performance is cache\-dependent.
For this reason, it is best to call \f(CWsolib_check()\fR for \f(CW\*(C`SBO\*(C'\fR packages only, and not
every package installed to the system.
.SS solib_present
.IX Subsection "solib_present"
.Vb 1
\&  my $solib_present = solib_present($cand_lib, $pkg, @candidate_files);
.Ve
.PP
\&\f(CWsolib_present()\fR takes the name of the shared object to be checked, the name of
a package file and an array with probable ELF files shipped by that package. It returns 1 if
the shard object appears to be present and 0 if it does not.
.PP
Please note that the known shared object array \f(CW@native_libs\fR (and \f(CW@x86_libs\fR if running
on the \f(CW\*(C`x86_64\*(C'\fR architecture) is the main source of shard object verification.
\&\f(CWsolib_present()\fR is called after this first verification step fails. Shared objects
that are neither shipped nor created as symlinks by the package can be missed.
.SS update_known_solibs
.IX Subsection "update_known_solibs"
.Vb 1
\&  update_known_solibs;
.Ve
.PP
\&\f(CWupdate_known_solibs()\fR takes no arguments. It uses the \f(CW\*(C`\-\-print\-cache\*(C'\fR option of
\&\f(CWldconfig(1)\fR to generate an array of known shared objects, \f(CW@native_libs\fR. On
\&\f(CW\*(C`x86_64\*(C'\fR systems, it generates \f(CW@x86_libs\fR as well, an array with 32\-bit shared objects.
.PP
The script exits in case of \f(CW\*(C`ldcdonfig\*(C'\fR failure. There is no useful return value.
.SH "EXIT CODES"
.IX Header "EXIT CODES"
Pkgs.pm subroutines can return the following exit codes:
.PP
.Vb 2
\&  _ERR_SCRIPT        2   script or module bug
\&  _ERR_OPENFH        6   failure to open file handles
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSBO::Lib\fR\|(3), \fBSBO::Lib::Build\fR\|(3), \fBSBO::Lib::Download\fR\|(3), \fBSBO::Lib::Info\fR\|(3), \fBSBO::Lib::Readme\fR\|(3), \fBSBO::Lib::Repo\fR\|(3), \fBSBO::Lib::Tree\fR\|(3), \fBSBO::Lib::Util\fR\|(3), \fBldconfig\fR\|(1)
.PP
\&\f(CW\*(C`https://refspecs.linuxbase.org/elf/gabi4+/\*(C'\fR is a helpful resource about the structure of
ELF files.
.SH AUTHORS
.IX Header "AUTHORS"
SBO::Lib was originally written by Jacob Pipkin <j@dawnrazor.net> with
contributions from Luke Williams <xocel@iquidus.org> and Andreas
Guldstrand <andreas.guldstrand@gmail.com>.
.SH MAINTAINER
.IX Header "MAINTAINER"
SBO::Lib is maintained by K. Eugene Carlson <kvngncrlsn@gmail.com>.
.SH LICENSE
.IX Header "LICENSE"
The sbotools are licensed under the MIT License.
.PP
Copyright (C) 2012\-2017, Jacob Pipkin, Luke Williams, Andreas Guldstrand.
.PP
Copyright (C) 2024\-2025, K. Eugene Carlson.
