.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "SBO::Lib::Info 3"
.TH SBO::Lib::Info 3 "Setting Orange, Confusion 64, 3191 YOLD" "" "sbotools 3.7"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SBO::Lib::Info \- Utilities to get data from SBo info files.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use SBO::Lib::Info qw/ get_reqs /;
\&
\&  my @reqs = @{ get_requires($sbo) };
.Ve
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS check_x32
.IX Subsection "check_x32"
.Vb 1
\&  my $bool = check_x32($location);
.Ve
.PP
\&\f(CWcheck_x32()\fR returns a true value if the SlackBuild in \f(CW$location\fR considers
64\-bit builds \f(CW\*(C`UNTESTED\*(C'\fR or \f(CW\*(C`UNSUPPORTED\*(C'\fR and false otherwise.
.SS check_x64
.IX Subsection "check_x64"
.Vb 1
\&  my $bool = check_x64($location);
.Ve
.PP
\&\f(CWcheck_x64()\fR returns a true value if the SlackBuild in \f(CW$location\fR considers
32\-bit builds \f(CW\*(C`UNTESTED\*(C'\fR or \f(CW\*(C`UNSUPPORTED\*(C'\fR and false otherwise.
.SS get_download_info
.IX Subsection "get_download_info"
.Vb 2
\&  my $downloads = get_download_info(LOCATION => $location, X64 => $x64);
\&  my $downloads = get_download_info(LOCATION => $location);
.Ve
.PP
\&\f(CWget_download_info()\fR reads in an info file from \f(CW$location\fR. The flag
\&\f(CW$x64\fR determines whether the 64\-bit download files should be used or not.
\&\f(CW$x64\fR defaults to a true value if unspecified.
.PP
This subroutine returns a hashref where each key is a download link; the
corresponding value is the expected md5sum.
.SS get_from_info
.IX Subsection "get_from_info"
.Vb 1
\&  my $data = get_from_info(LOCATION => $location, GET => $key);
.Ve
.PP
\&\f(CWget_from_info()\fR retrieves the information under \f(CW$key\fR from the info file
in \f(CW$location\fR.
.SS get_orig_build_number
.IX Subsection "get_orig_build_number"
.Vb 1
\&  my $build = get_orig_build_number($sbo);
.Ve
.PP
\&\f(CWget_orig_build_number()\fR returns the build number in the SlackBuilds.org tree for the
given \f(CW$sbo\fR, calling \f(CWget_sbo_build_number()\fR.
.SS get_orig_version
.IX Subsection "get_orig_version"
.Vb 1
\&  my $ver = get_orig_version($sbo);
.Ve
.PP
\&\f(CWget_orig_version()\fR returns the version in the SlackBuilds.org tree for the
given \f(CW$sbo\fR, calling \f(CWget_sbo_version()\fR.
.PP
This subroutine is used only by \f(CWsbocheck(1)\fR.
.SS get_requires
.IX Subsection "get_requires"
.Vb 1
\&  my $reqs = get_requires($sbo);
.Ve
.PP
\&\f(CWget_requires()\fR returns the requirements for a given \f(CW$sbo\fR.
.SS get_reverse_reqs
.IX Subsection "get_reverse_reqs"
.Vb 1
\&  my %required_by = get_reverse_reqs($slackbuilds);
.Ve
.PP
\&\f(CWget_reverse_reqs()\fR takes a list of SlackBuilds and returns a hashref with
reverse dependencies among them. \f(CW$slackbuilds\fR should ordinarily
be a list of all installed scripts.
.SS get_sbo_build_number
.IX Subsection "get_sbo_build_number"
.Vb 1
\&  my $build = get_sbo_build_number($location);
.Ve
.PP
\&\f(CWget_sbo_build_number()\fR returns the build number found in the SlackBuild in
\&\f(CW$location\fR.
.SS get_sbo_version
.IX Subsection "get_sbo_version"
.Vb 1
\&  my $ver = get_sbo_version($location);
.Ve
.PP
\&\f(CWget_sbo_version()\fR returns the version found in the info file in
\&\f(CW$location\fR.
.SS parse_info
.IX Subsection "parse_info"
.Vb 1
\&  my %parse = parse_info($str);
.Ve
.PP
\&\f(CWparse_info()\fR parses the contents of an info file from \f(CW$str\fR and returns
a key\-value list of all values present. It attempts to repair trailing whitespace,
blank lines, garbage lines and missing quotation marks and backslashes.
.SH "EXIT CODES"
.IX Header "EXIT CODES"
Info.pm subroutines can return the following exit codes:
.PP
.Vb 2
\&  _ERR_USAGE         1   usage errors
\&  _ERR_SCRIPT        2   script or module bug
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSBO::Lib\fR\|(3), \fBSBO::Lib::Build\fR\|(3), \fBSBO::Lib::Download\fR\|(3), \fBSBO::Lib::Pkgs\fR\|(3), \fBSBO::Lib::Readme\fR\|(3), \fBSBO::Lib::Repo\fR\|(3), \fBSBO::Lib::Solibs\fR\|(3), \fBSBO::Lib::Tree\fR\|(3), \fBSBO::Lib::Util\fR\|(3)
.SH AUTHORS
.IX Header "AUTHORS"
SBO::Lib was originally written by Jacob Pipkin <j@dawnrazor.net> with
contributions from Luke Williams <xocel@iquidus.org> and Andreas
Guldstrand <andreas.guldstrand@gmail.com>.
.SH MAINTAINER
.IX Header "MAINTAINER"
SBO::Lib is maintained by K. Eugene Carlson <kvngncrlsn@gmail.com>.
.SH LICENSE
.IX Header "LICENSE"
The sbotools are licensed under the MIT License.
.PP
Copyright (C) 2012\-2017, Jacob Pipkin, Luke Williams, Andreas Guldstrand.
.PP
Copyright (C) 2024\-2025, K. Eugene Carlson.
