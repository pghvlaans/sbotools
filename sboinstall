#!/usr/bin/perl
#
# vim: ts=4:noet
#
# sboinstall
# script to install (a) SlackBuild(s) by name
#
# authors: Jacob Pipkin <j@dawnrazor.net>
#          Luke Williams <xocel@iquidus.org>
#          Andreas Guldstrand <andreas.guldstrand@gmail.com>
# maintainer: K. Eugene Carlson <kvngncrlsn@gmail.com>
# license: MIT License

use 5.16.0;
use strict;
use warnings FATAL => 'all';
use SBO::Lib qw/ %config _ERR_OPENFH auto_reverse get_arch get_build_queue get_full_reverse get_full_reverse_queue get_installed_cpans get_installed_packages get_orig_location get_reverse_reqs get_readme_contents get_requires get_sbo_location get_sbo_locations get_user_group in is_obsolete merge_queues on_blacklist open_fh print_failures process_sbos prompt rationalize_queue show_version slackbuilds_or_fetch slurp uniq usage_error user_group_exist user_prompt verify_gpg lint_sbo_config wrapsay /;
use Getopt::Long qw(:config bundling);
use File::Basename;
use File::Copy;
use JSON::PP;

my $self = basename($0);

sub show_usage {
	print <<"EOF";
Usage: $self (options) sbo ...
       $self --use-template file
       $self --mass-rebuild

Options (defaults shown first where applicable):
  -h|--help:
    this screen.
  -v|--version:
    version information.
  -c|--noclean (FALSE|TRUE):
    if TRUE, do not clean working directories after building.
  -D|--dry-run:
    show the potential queue and exit
  -d|--distclean (FALSE|TRUE):
    if TRUE, delete downloaded source archives and the completed package after building.
  -i|--noinstall:
    do not run installpkg after building.
  -j|--jobs (FALSE|#):
    specify the number of parallel jobs (make).
  -o|--norecall:
    do not use saved build options with nointeractive.
  -p|--compat32:
    install a -compat32 package (multilib systems only).
  -q|--reverse-rebuild:
    rebuild a script's reverse dependencies.
  -r|--nointeractive:
    non-interactive; skips README and all prompts.
  -R|--norequirements:
    view the README but do not parse requirements, commands, or options.
  --batch:
    like nointeractive, but calculates dependencies (use with caution)
  --reinstall:
    ask to reinstall any installed packages in the requirements list.
  --create-template (FILE):
    create a template with specified requirements, commands, and options.
  --use-template (FILE):
    use a template created by --create-template to install requirements with
    specified commands and options.
  --mass-rebuild:
    rebuild all installed SlackBuilds at the available version.

EOF
	return 1;
}

my $noclean = $config{NOCLEAN};
my $distclean = $config{DISTCLEAN};
my $jobs = $config{JOBS};
my $gpg = $config{GPG_VERIFY};
my ($help, $vers, $no_install, $no_recall, $non_int, $no_reqs, $compat32, $ctemp, $utemp, $reinstall, $mass_rebuild, $reverse_rebuild, $yes_really, $dry_run);

my $options_ok = GetOptions(
	'help|h'            => \$help,
	'version|v'         => \$vers,
	'noclean|c=s'       => \$noclean,
	'distclean|d=s'     => \$distclean,
	'noinstall|i'       => \$no_install,
	'jobs|j=s'          => \$jobs,
	'norecall|o'        => \$no_recall,
	'compat32|p'        => \$compat32,
	'nointeractive|r'   => \$non_int,
	'norequirements|R'  => \$no_reqs,
	'reinstall'         => \$reinstall,
	'mass-rebuild'      => \$mass_rebuild,
	'create-template=s' => \$ctemp,
	'use-template=s'    => \$utemp,
	'reverse-rebuild|q' => \$reverse_rebuild,
	'batch'             => \$yes_really,
	'dry-run|D'         => \$dry_run,
);

if ($help) {
	show_usage();
	wrapsay "Non-root users can call $self with -D, -v and -h." unless $< == 0;
	exit 0;
}
if ($vers) { show_version(); exit 0; }
unless ($< == 0 or $dry_run) {
	show_usage();
	usage_error "Non-root users can call $self with -D, -v and -h.";
}
unless ($options_ok) {
	show_usage();
	usage_error "One or more invalid options detected.";
}

lint_sbo_config($self, %config);

if (!@ARGV and not length $utemp and not $mass_rebuild) { show_usage(); exit 1 }
if (defined $utemp and not length $utemp) { show_usage(); exit 1 }
if (defined $ctemp and not length $ctemp) { show_usage(); exit 1 }

# invalid parameters may have been passed from the command line
if (defined $noclean) {
	usage_error("You have provided an invalid value for -c|--noclean")
		unless ($noclean =~ /^(TRUE|FALSE)$/);
}

if (defined $distclean) {
	usage_error("You have provided an invalid value for -d|--distclean")
		unless ($distclean =~ /^(TRUE|FALSE)$/);
}

if ($jobs) {
	usage_error("You have provided an invalid value for -j|--jobs")
		unless ($jobs =~ /^\d+$/ || $jobs eq 'FALSE');
}

$noclean = $noclean eq 'TRUE' ? 1 : 0;
$distclean = $distclean eq 'TRUE' ? 1 : 0;
$gpg = $gpg eq 'TRUE' ? 1 : 0;

if ($gpg) { verify_gpg(); }

if ($compat32) {
	usage_error("compat32 only works on x86_64.") unless get_arch eq 'x86_64';
	usage_error("compat32 is incompatible with mass-rebuild.") unless not $mass_rebuild;
	usage_error("compat32 is incompatible with use-template.") unless not $utemp;
}

if ($utemp and $mass_rebuild) {
	usage_error("mass-rebuild is incompatible with use-template.");
}

if ($no_reqs and $mass_rebuild) {
	usage_error("mass-rebuild is incompatible with norequirements.");
}

if ($reverse_rebuild and $mass_rebuild) {
	usage_error("mass-rebuild is incompatible with reverse_rebuild.");
}

if ($utemp and $reverse_rebuild) {
	usage_error("reverse-rebuild is incompatible with use-template.");
}

if ($no_reqs and $reverse_rebuild) {
	usage_error("reverse-rebuild is incompatible with norequirements.");
}

$yes_really = 1 if $dry_run;
if ($no_reqs and $yes_really) {
	usage_error("norequirements is incompatible with batch and dry-run.");
}
$non_int = 1 if $yes_really;

# if we can't find SLACKBUILDS.TXT in $config{HOME}, prompt to fetch the tree
slackbuilds_or_fetch();

my (%warnings, $build_queue, $save_queue, $template);

# if SBO_HOME/resume.temp exists, resume the mass rebuild
my $mtemp = "$config{SBO_HOME}/mass_rebuild.temp";
my $mtemp_resume = "$config{SBO_HOME}/resume.temp";
my $resume_mass_rebuild;
if ($mass_rebuild and -f $mtemp_resume) {
	$resume_mass_rebuild = 1;
	$utemp = $mtemp_resume;
}
my $requested_reinstall = 1 if $reinstall;
$reinstall = 1 if $mass_rebuild or $reverse_rebuild;

my @sbos;

# if a requested compat32 script is ineligible anyway,
# do not bother with its dependencies, etc.
if (@ARGV and $compat32) {
	for my $sbo (@ARGV) {
		my ($perl_ineligible, $arch_ineligible);
		my $sbo_location = get_sbo_location($sbo);
		if ($sbo_location) {
			my $check_location = $sbo_location;
			my $orig_location = get_orig_location($sbo);
			$check_location = $orig_location if $orig_location;
			$perl_ineligible = 1 if $sbo =~ /^perl-/ or basename(dirname($check_location)) eq "perl";
			unless ($perl_ineligible) {
				my ($fh, $exit) = open_fh("$sbo_location/$sbo.SlackBuild", "<") if -f "$sbo_location/$sbo.SlackBuild";
				unless ($exit) {
					for my $line (<$fh>) {
						$perl_ineligible = 1 if $line =~ /perl (Makefile|Build).PL/;
						$arch_ineligible = 1 if $line =~ /ARCH=noarch/;
					}
					close $fh;
				}
			}
		}
		push @sbos, $sbo unless $perl_ineligible or $arch_ineligible;
		wrapsay "$sbo is Perl-based; skipping compat32." if $perl_ineligible;
		wrapsay "$sbo is a noarch script; skipping compat32." if $arch_ineligible and not $perl_ineligible;
	}
} elsif (@ARGV) {
	@sbos = @ARGV;
}
exit 0 if (@ARGV and not @sbos);
@sbos = uniq @sbos;

if (length $utemp) {
	my $json = JSON::PP->new->latin1;
	$non_int = 1;

	my $data = slurp($utemp);
	if (length $data) {
		eval { $template = $json->decode($data); };
	}
	do { warn "Could not read template from $utemp.\n"; exit _ERR_OPENFH } if not defined $template;

	for my $cand (@{ $template->{build_queue} }) {
		unless (on_blacklist($cand)) {
			push @$build_queue, $cand;
		} else {
			wrapsay "$cand is blacklisted. Skipping.";
		}
	}
	unless ($mass_rebuild or $no_install) {
		if ($requested_reinstall) {
			my ($extra_queue, %extra_warnings, @needs_reverse);
			for my $cand (@$build_queue) {
				if (auto_reverse($cand)) {
					push @needs_reverse, $cand;
					wrapsay "Reverse dependency rebuild for $cand.";
				}
			}
			($extra_queue, %extra_warnings) = get_full_reverse_queue($self, 0, @needs_reverse) if @needs_reverse;
			$save_queue = $build_queue;
			if ($extra_queue) {
				$build_queue = merge_queues($build_queue, $extra_queue);
				%warnings = (%warnings, %extra_warnings);
			}
		}
	}
# the --mass-rebuild queue is handled later
} elsif (not $mass_rebuild) {
	# noninteractive and no requirements
	if (not $reverse_rebuild and not $yes_really and ($no_reqs or $non_int)) {
		my $interim_queue = \@sbos;
		for my $cand (@$interim_queue) {
			unless (on_blacklist($cand)) {
				push @$build_queue, $cand;
			} else {
				wrapsay "$cand is blacklisted. Skipping.";
			}
		}
		$save_queue = $build_queue;
	# --reverse-rebuild, no --reinstall
	} elsif ($reverse_rebuild and not $requested_reinstall) {
		($build_queue, %warnings) = get_full_reverse_queue($self, 0, @sbos);
		exit 0 unless $build_queue;
	} else {
		for my $sbo (@sbos) {
			my ($extra_queue, %extra_warnings);
			my $queue = get_build_queue([$sbo], \%warnings);
			$build_queue = merge_queues($build_queue, $queue);
			$save_queue = merge_queues($save_queue, $build_queue);
			# --reverse-rebuild with --reinstall; include the items in @sbos
			if ($reverse_rebuild) {
				($extra_queue, %extra_warnings) = get_full_reverse_queue($self, 1, $sbo);
				if ($extra_queue) {
					$build_queue = merge_queues($build_queue, $extra_queue);
					%warnings = (%warnings, %extra_warnings);
				}
			}
		}
	}
}

# --reinstall, no --reverse-rebuild: trigger automatic rebuilds
# and put everything in the right order.
if ($requested_reinstall and not $reverse_rebuild and not $mass_rebuild and not $utemp) {
	my $need_rationalize;
	$save_queue = $build_queue;
	for my $sbo (@$build_queue) {
		my ($extra_queue, %extra_warnings);
		if (auto_reverse($sbo)) {
			($extra_queue, %extra_warnings) = get_full_reverse_queue($self, 1, $sbo);
			wrapsay "Reverse dependency rebuild for $sbo.";
		}
		if ($extra_queue) {
			$need_rationalize = 1;
			$build_queue = merge_queues($build_queue, $extra_queue);
			%warnings = (%warnings, %extra_warnings);
		}
	}
	$build_queue = rationalize_queue($build_queue) if $need_rationalize;
}

# get lists of installed packages and perl modules from CPAN
my $inst_pkgs = get_installed_packages('ALL');
my $std_pkgs = get_installed_packages('STD');
my ($pms, $defective);
unless ($config{CPAN_IGNORE} eq "TRUE") {
	($pms, $defective) = get_installed_cpans();
	s/::/-/g for @$pms;
	s/::/-/g for @$defective;
}
my (%inst_names, %std_names);
$inst_names{$_->{name}} = $_ for @$inst_pkgs;
$std_names{$_->{name}} = $_ for @$std_pkgs;

# prepare a queue in case of mass_rebuild
if ($mass_rebuild and not $resume_mass_rebuild) {
	my $needs_rationalize;
	my $inst_sbos = get_installed_packages('SBO');
	my %sbos_names;
	$sbos_names{$_->{name}} = $_ for @$inst_sbos;
	for my $sbo (%sbos_names) {
		my $name = $sbos_names{$sbo}{name};
		next if not $name;
		$needs_rationalize = 1 if $sbo =~ /-compat32$/;
		my $queue = get_build_queue([$name], \%warnings);
		if ($sbo =~ /-compat32$/) {
			for my $item (@$queue) { $item = "$item-compat32" unless $item =~ /-compat32$/; }
			$needs_rationalize = 1;
		}
		$build_queue = merge_queues($build_queue, $queue);
	}
	$build_queue = rationalize_queue($build_queue) if $needs_rationalize;
}

# populate %locations and sanity check
my %locations = get_sbo_locations($build_queue);
SANITY: for my $sbo (@$build_queue) {
	next SANITY if $inst_names{$sbo};

	if ($utemp and not $locations{$sbo}) {
		usage_error("Unable to locate $sbo and using a template.");
	} elsif ($non_int and not $yes_really and not $locations{$sbo} and in($sbo, @sbos)) {
		usage_error("Unable to locate $sbo and using nointeractive.")
	}
}

# see what has been installed as part of a reverse
# dependency queue
my @reverses;
for my $sbo (@$build_queue) {
	next if $sbo =~ /-compat32$/;
	push @reverses, $sbo unless grep { /^$sbo$/ } @$save_queue;
}

# check for already-installeds and prompt for the rest
my (@temp_queue, %commands, %options, %missing_user_group, @ignore_script);
if (defined $template) {
	%commands = %{ $template->{commands} };
	%options = %{ $template->{options} };
}
my $added = ' added to install queue.';
my (@see_readme, %saved_options);
FIRST: for my $sbo (@$build_queue) {
	my ($perl_ineligible, $arch_ineligible);
	my $name;
	if ($sbo =~ /-compat32$/) {
		next FIRST unless $utemp or $mass_rebuild;
		$name = $sbo;
		$sbo =~ s/-compat32$//;
	} else {
		$name = $compat32 ? "$sbo-compat32" : $sbo;
	}
	if ($std_names{$name} and $non_int) {
		wrapsay "$sbo is not an SBo package. Skipping.";
		next FIRST;
	}
	$locations{$name} = get_sbo_location($sbo) if $name =~ /-compat32$/;
	# do not attempt compat32 builds if noarch or perl-based; catch
	# ineligible scripts here, but skip them after checking for the base
	# package
	if ($name =~ /-compat32$/ and $locations{$name}) {
		my $check_location = $locations{$name};
		my $orig_location = get_orig_location($sbo);
		$check_location = $orig_location if $orig_location;
		$perl_ineligible = 1 if $name =~ /^perl-/ or basename(dirname($check_location)) eq "perl";
		unless ($perl_ineligible) {
			my ($fh, $exit) = open_fh("$locations{$name}/$sbo.SlackBuild", "<") if -f "$locations{$name}/$sbo.SlackBuild";
			next FIRST if $exit;
			for my $line (<$fh>) {
				$perl_ineligible = 1 if $line =~ /perl (Makefile|Build).PL/;
				$arch_ineligible = 1 if $line =~ /ARCH=noarch/;
			}
			close $fh;
		}
	}
	# for items in a reverse dependency rebuild queue, do not add
	# new compat32 packages unless they are a missing requirement
	if ($name =~ /-compat32/ and grep { /^$sbo$/ } @reverses) {
		my $needed_compat;
		unless ($inst_names{$name}) {
			for my $cand (@reverses) {
				next if $cand eq $sbo;
				my $cand_reqs = get_requires($cand);
				my $cand_name = $cand;
				$cand_name = "$cand_name-compat32" unless $cand_name =~ /-compat32$/;
				$needed_compat = 1 if grep { /^$sbo$/ } @$cand_reqs and $inst_names{$cand_name};
			}
		}
		next FIRST unless $inst_names{$name} or $needed_compat;
	}

	if ($inst_names{$name}) {
		next FIRST if defined $warnings{$sbo} and $warnings{$sbo} eq 'nonexistent';
		my $inst_msg = sprintf "%s (%s) is already installed.", $name, $inst_names{$name}{pkg};
		# always warn with default "no" for reinstall if the package is
		# installed non-SBo and it exists in the tree
		if ($reinstall and $std_names{$name}) {
			next FIRST unless prompt("$inst_msg\nWarning: $name is not an SBo package. Reinstall from SBo anyway?", default => 'no');
		} elsif ($reinstall and not $non_int) {
			if ($mass_rebuild or $reverse_rebuild) {
				next FIRST unless prompt("$inst_msg Do you want to reinstall from SBo?", default => 'yes');
			} else {
				next FIRST unless prompt("$inst_msg Do you want to reinstall from SBo?", default => 'no');
			}
		} elsif ($reinstall) {
			say "$inst_msg Reinstalling." unless $dry_run;
		} else {
			say $inst_msg;
			next FIRST;
		}
	} else {
		if ($sbo =~ /^perl-/ and $config{CPAN_IGNORE} ne "TRUE") {
			my $pm_name = $sbo;
			$pm_name =~ s/^perl-//;
			for my $pm (@$pms) {
				if ($pm =~ /^$pm_name$/i) {
					say "$sbo installed via the CPAN.";
					next FIRST;
				}
			}
			for my $pm (@$defective) {
				if ($pm =~ /^$pm_name$/i) {
					wrapsay "$sbo installed via the CPAN, but file(s) missing.";
				}
			}
		}
	}

	# Make sure the slackbuild exists on SBo
	if (defined $warnings{$sbo} and $warnings{$sbo} eq 'nonexistent') {
		next FIRST if is_obsolete($sbo);
		unless ($inst_names{$sbo}) {
			wrapsay "Unable to locate $sbo in the SlackBuilds.org tree.";
			if (not $non_int) {
				exit 0 unless prompt "Do you want to ignore it and continue?", default => 'yes';
			}
		}
		next FIRST;
	}
	# will give %README% advisories later for --dry-run
	push @see_readme, $sbo if defined $warnings{$sbo} and $warnings{$sbo} eq '%README%';

	unless ($non_int) {
		# if a compat32 build, we need to see if the non-compat version exists.
		if ($name =~ /-compat32$/) {
			unless ($inst_names{$sbo} or grep { /^$sbo$/ } @temp_queue) {
				say "$name requires $sbo." unless $perl_ineligible or $arch_ineligible;
				my ($cmds, $opts, $exit) = user_prompt($sbo, $locations{$sbo});
				if ($exit) {
					warn "Unable to open README for $sbo.\n";
					exit $exit;
				}
				if ($cmds) {
					next FIRST if $cmds eq 'N';
				}
				push(@temp_queue, $sbo);
				$commands{$sbo} = $cmds;
				$options{$sbo} = $opts;
				say "$sbo$added";
			}
		}
		# actually skip ineligible compat32 builds here (interactive)
		if ($perl_ineligible) {
			wrapsay "$sbo is Perl-based; skipping compat32.";
			next FIRST;
		}
		if ($arch_ineligible) {
			wrapsay "$sbo is a noarch script; skipping compat32.";
			next FIRST;
		}
		my ($cmds, $opts, $exit) = user_prompt($name, $locations{$name});
		if ($exit) {
			warn "Unable to open README for $name.\n";
			exit $exit;
		}
		if ($cmds) {
			next FIRST if $cmds eq 'N';
		}
		push(@temp_queue, $name);
		$commands{$name} = $cmds;
		$options{$name} = $opts;
		say "$name$added";
	} else {
		unless ($utemp) {
			# for --batch, check for existing user and group, exiting
			# with a message if not; notify with --dry-run
			if ($yes_really) {
				my $readme = get_readme_contents($locations{$sbo});
				unless (defined $readme) {
					warn "Unable to open README for $sbo.\n";
					exit _ERR_OPENFH;
				}
				my $cmds = get_user_group($readme, $locations{$sbo});
				if ($$cmds[0]) {
					unless (user_group_exist(@$cmds)) {
						if ($dry_run) {
							$missing_user_group{$sbo} = $cmds;
						} else {
							wrapsay "A required user or group is missing for $sbo:", 1;
							for my $cmd (@$cmds) { say $cmd; }
							say "";
							usage_error "Run these commands to install $sbo with --batch.";
						}
					}
				}
			}
			my $base_needed;
			# add the required base script if --batch
			if ($yes_really and $name =~ /-compat32$/) {
				unless ($inst_names{$sbo} or grep { /^$sbo$/ } @temp_queue) {
					say "$name requires $sbo." unless $dry_run or $perl_ineligible or $arch_ineligible;
					$base_needed = 1;
				}
			}
			# if nointeractive or batch, use saved build options unless reading a template
			# or passing norecall
			unless ($no_recall) {
				my $opts_log = "/var/log/sbotools/$sbo";
				if (-f $opts_log) {
					my ($prev_fh, $exit) = open_fh($opts_log, '<');
					if ($exit) {
						warn $prev_fh;
					} else {
						my $opts = <$prev_fh>;
						$saved_options{$name} = $opts if $dry_run;
						$options{$name} = $opts;
						$options{$sbo} = $opts if $base_needed;
					}
				}
			}
			# this can only happen if --batch or --dry-run
			if ($base_needed) {
				push(@temp_queue, $sbo);
				say "\n$sbo$added" unless $dry_run or $perl_ineligible or $arch_ineligible;
			}
			# for dry-run, do not want to notify the user of %README%, missing user/group
			# or saved build options unless the script will actually be built
			if ($dry_run and not $base_needed and ($perl_ineligible or $arch_ineligible)) {
				@see_readme = grep { !/^$sbo$/ } @see_readme;
				push @ignore_script, $name;
				push @ignore_script, $sbo;
			}
		}
		# actually skip ineligible compat32 builds here (non-interactive)
		if ($perl_ineligible) {
			wrapsay "$sbo is Perl-based; skipping compat32.";
			next FIRST;
		}
		if ($arch_ineligible) {
			wrapsay "$sbo is a noarch script; skipping compat32.";
			next FIRST;
		}
		push(@temp_queue, $name);
		say "\n$name$added" unless $dry_run;
	}
}
@$build_queue = @temp_queue;

exit 0 if @{ $build_queue } == 0;
if ($dry_run) {
	if (@see_readme) {
		wrapsay "\nSee README for:";
		for my $item (@see_readme) { say "  $item"; }
	}
	if (%saved_options) {
		say "\nSaved build options to be used:";
		for my $item (keys %saved_options) {
			say "  $item: $saved_options{$item}" unless grep { /^$item$/ } @ignore_script;
		}
	}
}
wrapsay "\nInstall queue: " . join(' ', @$build_queue);
unless ($non_int) {
    exit 0 unless prompt("\nAre you sure you wish to continue?", default => 'yes');
}
if ($dry_run) {
	if (%missing_user_group) {
		for my $item (keys %missing_user_group) {
			unless (grep { /^$item$/ } @ignore_script) {
				wrapsay "\nA required user or group is missing for $item:", 1;
				for my $cmd (@{ $missing_user_group{$item} }) { say $cmd; }
				say "";
				wrapsay "Run these commands to install $item with --batch.";
			}
		}
	}
	exit 0;
}

if (defined $ctemp or $mass_rebuild) {
	$ctemp = $mtemp unless defined $ctemp;
	my ($temp_fh, $exit) = open_fh($ctemp, '>');
	do { warn $temp_fh; exit $exit } if $exit;

	my $json = JSON::PP->new->latin1->pretty->canonical;
	my $build_settings = {
		build_queue => $build_queue,
		commands    => \%commands,
		options     => \%options,
	};
	print {$temp_fh} $json->encode( $build_settings );
	close $temp_fh;
	if ($ctemp ne $mtemp and $mass_rebuild) {
		my ($m_fh, $exit_m) = open_fh($mtemp, '>');
		print {$m_fh} $json->encode( $build_settings );
		close $m_fh;
	}
	print "\nTemplate $ctemp saved.\n";
}

my ($failures, $exit) = process_sbos(
	TODO      => $build_queue,
	CMDS      => \%commands,
	OPTS      => \%options,
	JOBS      => $jobs,
	LOCATIONS => \%locations,
	NOINSTALL => $no_install,
	NOCLEAN   => $noclean,
	DISTCLEAN => $distclean,
	NON_INT   => $non_int,
	MASS      => $mass_rebuild,
);
print_failures($failures);

unlink $mtemp if -f $mtemp;
if ($exit) {
	exit $exit;
} else {
	exit 0;
}
